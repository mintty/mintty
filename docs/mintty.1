.\" mintty man page
.\"
.\" This 'man' page is Copyright 2009 Lee D. Rothstein, 2009-13 Andy Koppe
.\"
.\" You may distribute, use, and modify this man page under the terms
.\" of the GNU Free Documentation License (GFDL), Version 1.3,
.\" 3 November 2008 (or later) as specified.
.TH mintty 1 mintty

.ad l

.SH NAME

mintty \(en Cygwin terminal emulator

.SH SYNOPSIS

\fBmintty\fP [\fIOPTION\fP]... [ \fB-\fP | \fIPROGRAM\fP [\fIARG\fP]... ]

.SH DESCRIPTION

\fBMintty\fP is a terminal emulator for Cygwin with a native Windows user
interface and minimalist design.
Its terminal emulation is largely compatible with \fBxterm\fP, but it does not
require an X server.

.SH INVOCATION

If a program name is supplied on the command line, this is executed with any
additional arguments given.
Otherwise, mintty looks for a shell to execute in the \fISHELL\fP environment
variable.
If that is not set, it reads the user's default shell setting from
\fI/etc/passwd\fP.
As a last resort, it falls back to \fI/bin/sh\fP.

If a single dash is specified instead of a program name, the shell is invoked
as a login shell.

Invocation by a name of \fBwsl*\fP\fI[-distro]\fP 
implies a \fB--WSL\fP\fI[=distro]\fP parameter.

Mintty supports being started from a Windows desktop shortcut; it honours
window and icon settings of the shortcut, aligns taskbar grouping with the 
shortcut, disables daemonizing, and sets environment variable 
MINTTY_SHORTCUT to its pathname.

.SH OPTIONS

The standard GNU option formats are accepted, with single dashes
introducing short options and double dashes introducing long options.
.br
Note that setting \fBShortLongOpts\fP enables single-dash long options.

.TP
\fB-c\fP, \fB--config\fP \fIFILENAME\fP
Read settings from the specified configuration file, in addition to
the default config files.
Configuration changes are saved to the last file thus specified.

.TP
\fB-C\fP, \fB--loadconfig\fP \fIFILENAME\fP
Read settings from the specified configuration file, in addition to
the default config files.
The file is not taken into account for saving configuration changes.
This is useful to mix-in partial configuration variants, particularly 
colour schemes. However, \fB-o ThemeFile=\fIFILENAME\fP may be preferable.

.TP
\fB--configdir\fP \fIDIRNAME\fP
Use the given directory to check for resource subdirectories 
(\fIthemes\fP, \fIsounds\fP, \fIlang\fP, \fIemojis\fP, \fIicon\fP);
also read settings from the configuration file \fIDIRNAME\fP/\fBconfig\fP, 
in addition to the default config files, and save configuration changes here.

.TP
\fB--dir\fP \fIdirectory\fP
Change initial directory to start in. This is especially useful for 
invocation of mintty from a Windows context menu via registry entry.

.TP
\fB-e\fP, \fB--exec\fP \fIPROGRAM\fP [\fIARG\fP ...]
Execute the specified program in the terminal session and pass on any additional
arguments.

This option is present for compatibility with other terminal emulators only.
It can be omitted, in which case the first non-option argument, if any,
is taken as the name of the program to execute.

.TP
\fB-h\fP, \fB--hold\fP \fBnever\fP|\fBstart\fP|\fBerror\fP|\fBalways\fP
Determine whether to keep the terminal window open when the command has
finished and no more processes are connected to the terminal.
The argument can be abbreviated to a single letter.

By default, the window is closed immediately, except if the child process has
exited with status 255, which is used to indicate failure to execute the shell
command.  (Exit status 255 is also used by \fBssh\fP to indicate connection
errors.)

Alternatively, the window can be set to never stay open, to always stay open,
or to stay open only if the child process terminates with an error, i.e. with
a non-zero exit status or due to a signal indicating a runtime error.

.TP
\fB-i\fP, \fB--icon\fP \fIFILE\fP[\fB,\fIINDEX\fP]
Load the window icon from an executable, DLL, or icon file.  The optional
comma-separated index can be used to select a particular icon in a file with
multiple icons.

\fINote:\fP About interaction problems of icon, shortcut, and the Windows taskbar:
In a Windows desktop shortcut, it is suggested not to use this option in the 
Target command line, as mintty will detect and use the icon 
from the invoking shortcut (Change Icon...), 
also resolving a leading Windows environment variable (like %SystemRoot%).

.TP
\fB-l\fP, \fB--log\fP \fIFILE\fP|\fB-\fP
Copy all output into the specified log file, or standard output if a dash is
given instead of a file name.
(Implies \fB-o Logging=yes\fP.)

If FILE contains \fB%d\fP it will be substituted with the process ID.
See description of equivalent option "Log file" (Log=) below 
for further formatting options and hints.

Note that logging can be toggled from the extended context menu.

.TP
\fB--logfile\fP \fIFILE\fP|\fB-\fP
Like \fB--log\fP but with logging initially disabled, so just 
specifying a potential log file name in case logging is enabled from 
the extended context menu.
(Equivalent to combining \fB--log\fP with \fB-o Logging=no\fP.)

.TP
\fB-o\fP, \fB--option\fP \fINAME\fP=\fIVALUE\fP
Override the named config file option with the given value, e.g.
\fC-o ScrollbackLines=1000\fP.

.TP
\fB-p\fP, \fB--position\fP \fIX\fB,\fIY\fP
Open the window with its top left corner at the specified coordinates.
Instead of coordinates, "centre" or "center" can be specified to place 
the window in the screen centre, and "right" or "bottom" can be specified 
to align the right or bottom window border with the right or bottom 
screen border (together with another option -p to specify an offset).

Option value "@N" where N is a number places the window on monitor N.

Multiple -p options can be combined; coordinates have a different meaning 
depending on other options:
.br
\(en With "left", "top", or "@N", related coordinates are relative to the monitor.
.br
\(en With "right" or "bottom", related coordinates adjust the right or bottom 
window border relative to the monitor.
.br
\(en Otherwise, coordinates are absolute and address the common multi-monitor 
address space as provided by Windows.

\fINote:\fP For another option to select the monitor for a new mintty window, 
see the description of Alt+F2.

.TP
\fB-s\fP, \fB--size\fP \fICOLS\fB,\fIROWS\fP
Set the default size of the window in character columns and rows.
(The xterm-like syntax \fICOLS\fBx\fIROWS\fP is accepted too.)
Instead of coordinates, "maxwidth" or "maxheight" can be specified;
this can be combined with another parameter \fB-s\fP for the other dimension.
The dimension for which "max" is applied is ignored in further \fB-s\fP or 
\fB-p\fP parameters.
For example, \fBmintty -s maxwidth -p 0,0 -s 0,10\fP will start a window 
at full screen width, positioned at the top of the screen, with 10 lines.

.TP
\fB--nobidi\fP, \fB--nortl\fP
Disable bidi display (right-to-left support). Same as \fB-o Bidi=0\fP.

.TP
\fB-t\fP, \fB--title\fP \fITITLE\fP
Use \fITITLE\fP as the initial window title.
By default, the title is set to the executed command.

.TP
\fB-T\fP, \fB--Title\fP \fITITLE\fP
Use \fITITLE\fP as the permanent window title.
The title is not changeable by control sequences.
This feature is only available on the command line.

.TP
\fB-B\fP, \fB--Border\fP \fBframe\fP|\fBvoid\fP
Suppress window title, display only a frame or no border.
This feature is only available on the command line.
Note that frame border operations are also disabled.
However, a window move can also be done with Ctrl+Alt+click-drag.

.TP
\fB-u\fP, \fB--utmp\fP
Create a utmp entry.

.TP
\fB-w\fP, \fB--window\fP \fBnormal\fP|\fBmin\fP|\fBmax\fP|\fBfull\fP|\fBhide\fP
Set the initial window state: normal, minimized, maximized, full screen,
or hidden.

.TP
\fB--class\fP \fICLASS\fP
Use \fICLASS\fP as the window class name of the main window.
This allows scripting tools to distinguish different mintty instances.
The default is "mintty".

.TP
\fB-d\fP, \fB--nodaemon\fP
Do not apply "daemonizing".
By default, mintty tries to detach itself from the invoking terminal when 
started from a Cygwin Console in order to avoid disabled signal reception, 
and when cloning the window (Alt+F2) in order to avoid a remaining zombie process.

.TP
\fB-D\fP, \fB--daemon\fP
Enforce "daemonizing".
By default, mintty tries to detach itself from the invoking terminal only 
as described above. With this option, it tries to detach always.
This makes a difference if a Windows "Shortcut key" is configured in a 
Windows desktop shortcut for starting mintty. Without daemonizing, the 
shortcut key will focus an already running instance of mintty, with 
daemonizing it always starts a new instance.

.TP
\fB-R\fP, \fB--Report\fP \fIinfo/mode\fP
Report requested information.

With values "s" or "o", mintty reports the position and size of the window 
when it exits. This can be used to manage last window positions and reopen 
mintty windows accordingly.
Reporting mode is "s" or "o" to choose short or long option syntax for the 
restored (i.e. neither maximized nor minimized) geometry; 
min/max/fullscreen information is added.

With value "m", mintty reports the system's monitor configuration 
(listing all connected monitors and their geometry and position in 
Windows' virtual monitor coordinate system), and exits.

With value "f", mintty reports the monospace fonts installed on the system 
as determined by mintty, and exits.

With value "W", mintty lists installed WSL distributions and properties, 
and exits.

With value "p", mintty reports the PID of the child process (e.g. the shell).
With value "P", mintty reports the cygwin PID and the Windows PID 
of the mintty process (i.e. running the terminal).

.TP
\fB--trace\fP \fIOUTPUT\fP
This option redirects reporting (and debug) output to a file.

.TP
\fB--store-taskbar-properties\fP
Enable persistent storage of Windows taskbar properties together with 
options AppName and AppLaunchCmd.

.TP
\fB--nopin\fP
Prevent pinning of the mintty window to the Windows taskbar.

.TP
\fB--wsl\fP
Adjust to WSL (the Windows Subsystem for Linux, or Bash/Ubuntu on Windows):
.br
\(en When dragging a Windows file or folder into mintty, it will be pasted 
using the Linux path name.
.br
\(en When Ctrl+clicking a file name, it will be interpreted in the Linux 
namespace and converted before opening in Windows.
.br
\(en Options DropCommands and setting MINTTY_PROG for UserCommands are disabled.
.br
\(en The working directory of the current foreground process 
(for click-opening pathnames) cannot be detected.
.br
\(en Locale modification (@cjk...) is disabled.

.TP
\fB--WSL\fP \fIWSL DISTRIBUTION NAME\fP
Run a WSL session, setting other parameters as appropriate and involving 
one of the \fIwslbridge2\fP gateways implicitly 
(which should be installed in /bin for this purpose).
If the distribution name is empty, the default WSL installation is run; 
otherwise, it refers to the installed WSL packages as listed by the 
Windows tool \fBwslconfig /l\fP.
Implies \fB--wsl -o Locale=C -o Charset=UTF-8\fP, \fB--rootfs=\fP..., 
and \fB--icon=\fP... if a respective icon file exists for the distribution.

.TP
\fB--WSLmode\fP \fIWSL DISTRIBUTION NAME\fP
Setup a WSL session like \fB--WSL\fP but do not actually launch wsl 
which must be achieved with explicit setup of a suitable gateway.

.TP
\fB--rootfs\fP \fIROOTFOLDER\fP
Provide the root filesystem folder to adjust path conversion properly 
for the respective WSL installation.

.TP
\fB-~\fP
Start in the user's home directory. Affects also WSL sessions.

.TP
\fB-H\fP, \fB--help\fP
Display a brief help message and exit.

.TP
\fB-V\fP, \fB--version\fP
Print version information and exit.

.TP
A number of xterm-style convenience options are also available:

.TP
\fB--fg\fP
Sets ForegroundColour.

.TP
\fB--bg\fP
Sets BackgroundColour.

.TP
\fB--cr\fP
Sets CursorColour.

.TP
\fB--selfg\fP
Sets HighlightForegroundColour.

.TP
\fB--selbg\fP
Sets HighlightBackgroundColour.

.TP
\fB--fn\fP, \fB--font\fP
Sets Font.

.TP
\fB--fs\fP
Sets FontSize.

.TP
\fB--geometry\fP \fICOLS\fBx\fIROWS\fP[[-+]\fIX\fB[-+]\fIY\fB][\fI@\fBMONITOR]
Sets size and position, extending xterm syntax by an optional monitor number.

.TP
\fB--en\fP
Sets Charset within the current locale.

.TP
\fB--lf\fP
Sets Log, the log file name.
Use \fB-l\fP to both set the log file name and enable logging.

.TP
\fB--sl\fP
Sets ScrollbackLines.

.SH USAGE

Mintty tries to adhere to both Windows and Unix usage conventions.
Where they conflict, an option is usually provided.
This section primarily describes the default configuration;
see the \fBCONFIGURATION\fP section on how it can be customised.

.SS Font rendering

Mintty uses Windows Uniscribe font rendering to display a wider range 
of characters; the TextOut API is automatically used instead if suitable.

.SS Bidirectional rendering

In addition to its default implicit bidirectional rendering with automatic 
direction detection (according to the Unicode Bidi algorithm), 
mintty supports ECMA-48 bidi modes and private bidi modes to control 
switchable bidi behaviour per line and partially per paragraph (i.e. within 
an auto-wrapped line), as listed in 
\fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#bidirectional-rendering\fP.
They follow the current status of the bidi mode model of the 
\fBBiDi in Terminal Emulators\fP recommendation 
(\fIhttps://terminal-wg.pages.freedesktop.org/bidi/\fP).

.SS Menus

The context menu can be opened by right-clicking the mouse (with Shift 
in case right-click has been redefined or redirected to the application) or by
pressing the \fBMenu\fP key that is normally located next to the right Ctrl key.
If invoked while the Ctrl key is held down, an extended context menu will 
be opened, with some additional entries.

Mintty also adds a couple of items to the window menu, which can be accessed 
by clicking on the program icon or pressing \fBAlt+Space\fP.

Both menus have an entry that leads to the options dialog for changing mintty's
configuration.

.SS Text selection, copy & paste

Screen contents can be selected by holding down the left mouse button and
dragging the mouse.  If Alt is held down before the left mouse button, a 
rectangular block instead of whole lines will be selected.
The selection can be extended by holding down \fBShift\fP while left-clicking.
Double-clicking or triple-clicking selects a whole word or line, whereby word
selection includes special characters that commonly appear in file names and
URLs.

By default, selected text is automatically copied to the clipboard.
This can be disabled on the \fBMouse\fP page of the options dialog.
Selected text can also be copied manually using either the \fBCopy\fP menu
command, the \fBCtrl+Ins\fP or \fBCtrl+Shift+C\fP keyboard shortcuts 
(\fBCtrl+C\fP with option \fBCtrlExchangeShift=yes\fP), 
or the middle mouse button combined with \fBShift\fP.

The selected region is copied as "rich text" as well as normal text,
which means it can be pasted with colours and formatting into applications
that support it, e.g. word processors ("true colour" attributes are not supported).

The window title can be copied using the \fBCopy Title\fP command in the window
menu.

The clipboard contents can be pasted using either the \fBPaste\fP menu command,
the \fBShift+Ins\fP or \fBCtrl+Shift+V\fP keyboard shortcuts 
(\fBCtrl+V\fP with option \fBCtrlExchangeShift=yes\fP), 
or the middle mouse button.
Not only text but also files and directories can be pasted,
whereby the latter are inserted as Cygwin file names.
Shell quoting is added to file names that contain spaces or special characters.

Selection highlighting is cleared on input by default. This can be disabled
with option \fBClearSelectionOnInput=false\fP.

The current selection size can optionally been indicated with a popup, 
enabled with option \fBSelectionShowSize\fP.

Selection can also be managed using the keyboard. Shift+middle-keypad-key 
(Shift+"5") enters keyboard selecting mode (modifier configurable).

.TP
\fBElastic text selection\fP
The traditional selection behaviour of cell-based terminals is that a 
character touched with the mouse is included in the selection.
With option \fBElasticMouse\fP, text selection can be changed to include 
the first and last characters only if they are spanned at least halfway 
by the mouse dragging, like many GUI application do.

.SS Drag & drop

Text, files and directories can be dropped into the mintty window.
They are inserted in the same way as if they were pasted from the clipboard.

.SS Opening files, directories and URLs

Files, directories, URLs and web addresses beginning with "www." can be 
opened either by holding \fBCtrl\fP while left-clicking on them (or 
double-clicking, if and as enabled by option \fBOpeningClicks\fP), or by 
selecting them and choosing the \fBOpen\fP command from the context menu.
Embedded spaces are considered if escaped with a backslash; for 
selected pathnames, also embedding quote marks are considered.

A relative pathname is interpreted as relative to the current working 
directory of the terminal foreground process if that can be determined, 
overridden by the working directory interactively communicated by the 
respective control sequence (OSC 7).

Mintty also supports the OSC 8 control to embed explicit hyperlinks 
(similar to links on web pages), 
see \fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#hyperlinks\fP.

\fINote:\fP While application mouse modes are enabled (as used by many 
screen oriented applications), \fBCtrl+Shift+click\fP can be used to 
override it.

.TP
\fBHovering files, directories and URLs\fP
The file names and links subject to opening are indicated by underlining 
when mouse-hovering over them (i.e. when moving the mouse) while the 
Control key is pressed. The colour used for hovering underlines 
can be configured with \fBHoverColour\fP. Explicit hyperlinks are displayed 
in the window title when hovering them; this can be disabled with \fBHoverTitle\fP.

.SS Font zoom

The font size can be increased or decreased using the keyboard shortcuts
\fBCtrl+(keypad-)plus\fP and \fBCtrl+(keypad-)minus\fP, 
or by holding \fBCtrl\fP while rolling the mouse wheel.
\fBCtrl+zero\fP or \fBCtrl+middle-mouse click\fP returns the font size 
to the default.
.br
\fIShift-coupled window-with-font zooming:\fP
If Shift is also held while zooming, the window will be resized to scale 
together with the font, keeping the terminal character size if possible.
This is not applied to the shifted numeric keypad "0" (which has other 
meaning) and to the shifted normal (non-keypad) "-" and "+" keys 
(because the shifted key could have a valid mapping, e.g. Ctrl+_, or the 
"+" key could be shifted itself already).
.br
Zooming by keyboard or mouse can be disabled, respectively, with options 
ZoomShortcuts=no or ZoomMouse=no.

.SS Drag resize

The usual windows function to drag on the window border resizes the terminal.
.br
\fIShift-coupled font-with-window zooming:\fP
If Shift is also held while resizing, but Control is not held, the 
font will be scaled along with the resizing, unless disabled with 
ZoomFontWithWindow=false (which would help to avoid interference with 
certain shifted hotkeys configured to resize the window).
.br
Note that due to the different height/width factors, coupled font zooming 
is not a precise operation.

.SS DPI change

When DPI setting changes (by reconfiguration of display properties 
"what's on your screen ... smaller/medium/larger" or moving the mintty window 
between monitors with different DPI settings), mintty adapts its screen 
size to avoid Windows blurred auto-adaptation. If Shift is also held during 
the change, the font will be scaled too, roughly maintaining the screen 
dimensions.

.SS Full screen

Full screen mode can be toggled using either the \fBFull Screen\fP command in
the menu or either of the \fBAlt+Enter\fP and \fBAlt+F11\fP keyboard shortcuts, 
or the generic window title functions.

.SS Default size

If the window has been resized, it can be returned to the default size set in
the Window pane of the options using the \fBDefault size\fP command in the
menu or the \fBAlt+F10\fP shortcut.
\fBShift+Alt+F10\fP also restores the font size to its default.

.SS Reset

Sometimes a faulty application or printing a binary file will leave the
terminal in an unusable state. In that case, resetting the terminal's state
via the \fBReset\fP command in the menu or the \fBAlt+F8\fP keyboard shortcut
may help.

.SS Scrolling

Mintty has a scrollback buffer that can hold up to 10000 lines in the default
configuration.
It can be accessed using the scrollbar, the mouse wheel, or the keyboard.
Hold the \fBShift\fP key while pressing the \fBUp\fP and \fBDown\fP arrow keys
to scroll line-by-line or the \fBPageUp\fP and \fBPageDown\fP keys to scroll
page-by-page.
With option \fBKeyFunctions\fP, user-defined keys can be used for scrolling.

.SS Searching in the text and scrollback buffer

The \fBSearch\fP menu command and \fBAlt+F3\fP shorcut open a search bar 
with an input field for a search string. Matches are highlighted in the 
scrollback buffer. \fBEnter\fP/\fBShift+Enter\fP find the next/previous 
position of the match and scrolls the scrollback buffer accordingly.
\fBTab\fP focusses back into the terminal pane of the window.
The appearance of the search bar and the matching highlight colours can be 
customized.
.br
Matching is case-insensitive and ignores combining characters.

Shift+cursor-left/right offers another scrolling feature. If prompt lines 
are marked with scroll markers they navigate to the previous/next prompt, to 
provide a better orientation among the output of previously invoked commands.
See the Control Sequences wiki page \fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#scroll-markers\fP for details.

.SS Flip screen

Applications such as editors and file viewers normally use a terminal feature
called the alternate screen, which is a second screen buffer without scrollback.
When they exit, they switch back to the primary screen to restore the command
line as it was before invoking the application.

The \fBFlip Screen\fP menu command and \fBAlt+F12\fP shortcut allow looking
at the primary screen while the alternate screen is active, and vice versa.
For example, this allows to refer to past commands while editing a file.

.SS Switching session

The \fBCtrl+Tab\fP and \fBCtrl+Shift+Tab\fP shortcuts can be used to 
cycle through mintty windows.
Minimized windows are skipped unless both \fBCtrl\fP keys are used.

.SS Virtual Tabs

The Virtual Tabs feature provides a list of all running mintty sessions (session switcher) 
as well as configurable launch parameters for new sessions (session launcher).
The session list is shown when right-clicking the title bar (if 
virtual tabs mode is configured or with Ctrl) or ctrl+left-clicking it.
By default, the list is also shown in the extended context menu (Ctrl+right-click), 
the mouse button 5 menu, and the menus opened with the Ctrl+Menu key 
and the Ctrl+Shift+I shortcut (if enabled).
(Menu contents for the various context menu invocations is configurable.)
For configuration, see settings \fBSessionCommands\fP, \fBMenu*\fP, 
and \fBSessionGeomSync\fP.
Distinct sets of sessions can be set up with the setting \fB-o Class=...\fP.

Virtual Tabs can be switched quickly with user-defined key assignments, 
using user-definable functions switch-[visible-](prev|next).

.SS Closing a session

Clicking the window's close button, pressing \fBAlt+F4\fP, or choosing
\fBClose\fP from the window menu sends a \fISIGHUP\fP signal to the process
running in mintty, which normally causes it to exit.

That signal can be ignored, though, in which case the program might have to be
forced to terminate by sending a \fISIGKILL\fP signal instead.
This can be done by holding down \fBShift\fP when using the close button,
shortcut or menu item.

.SS Terminal Break

A traditional BRK event on a serial terminal connection can be simulated.
The Break is available in the extended context menu and it can be mapped 
to the Break key (or other user-defined key) by configuration.
Note, however, that a BRK can be ignored by configuration of the terminal 
device (pty) or can be ignored by an application by catching the SIGINT signal.
For more forceful interruption of the terminal client application, see the 
Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#terminating-the-foreground-program\fP.

Note that Ctrl+C is often configured to raise a SIGINT signal. However, 
this is not a terminal feature and can also be reconfigured (stty), so 
in fact BRK and Ctrl+C are inherently different functions.

.SS Mouse tracking

When an application activates mouse tracking, mouse events are sent to the
application rather than being treated as window events.
This is indicated by the mouse pointer changing from an \fBI\fP shape to an
arrow.
Holding down \fBShift\fP overrides mouse tracking mode and sends mouse
events to the window instead, so that e.g. text can be selected and the 
context menu can be accessed.

Mintty supports 5-button mice, handling mouse buttons 4 / 5 like 
Alt+click-left / right in most mouse modes.

.SS Alt codes

The Windows Alt+Numpad method for entering character codes is supported,
whereby the Alt key has to be held while entering the character code.
Only the first key has to be on the numpad; subsequent digits can be entered
both on the numpad or the main part of the keyboard.

If the first key is the \(aq\fB+\fP\(aq on the numpad, the code is interpreted as
hexadecimal, whereby digits A through F can be entered using the letter keys.
If the first key is a zero, the code is interpreted as octal.
If the first key is any other digit from 1 to 9, the code is interpreted as
decimal.

For UTF-8 and other Unicode encodings such as GB18030, the entered code is 
interpreted as a Unicode codepoint and encoded accordingly before it is sent.
For other encodings, the entered code is sent as is. 
If it doesn't fit into one byte, it is sent as multiple bytes, with 
the most significant non-zero byte first.

.SS Keyboard shortcuts

This section gives an overview of all the keyboard shortcuts.
See also the final subsection on user-defined shortcuts.

.TP
\fBScrollback and Selection via keyboard\fP
.br
\(en \fBShift+Up\fP: Line up
.br
\(en \fBShift+Down\fP: Line down
.br
\(en \fBShift+PgUp\fP: Page up
.br
\(en \fBShift+PgDn\fP: Page down
.br
\(en \fBShift+Home\fP: Top
.br
\(en \fBShift+End\fP: Bottom
.br
\(en \fBAlt+F3\fP: Search
.br
\(en \fBShift+cursor-left\fP: Go to previous scroll marker (e.g. in prompt)
.br
\(en \fBShift+cursor-right\fP: Go to next scroll marker (e.g. in prompt)
.br
\(en \fBShift+middle-keypad-key\fP: Enter keyboard selecting mode

Note: The modifier can be configured with setting \fBScrollMod\fP.

Keyboard selecting mode: \fBAlt\fP sets rectangular selection.
Once keyboard selecting mode is entered, the following keys are applied:
.br
\(en \fBUp\fP, \fBDown\fP, \fBUp\fP, \fBUp\fP: Modify selection
.br
\(en \fBPgUp\fP, \fBPgDn\fP, \fBHome\fP, \fBEnd\fP: Scroll/Modify selection
.br
\(en \fB[Alt+]middle-keypad-key\fP: Restart [rectangular] selection
.br
\(en \fBInsert\fP or \fBEnter\fP: Copy selection and exit selection mode
.br
\(en \fBDelete\fP or \fBESC\fP: Exit selection mode

.TP
\fBCopy and paste\fP
.br
\(en \fBCtrl+Ins\fP: Copy
.br
\(en \fBShift+Ins\fP: Paste
.br
\(en \fBCtrl+Shift+Ins\fP: Copy and paste

.TP
\fBWindow commands\fP
.br
\(en \fBAlt+F2\fP: New (clone window at current size); see notes below
.br
\(en \fBShift+Alt+F2\fP: New (clone window at configured size); see notes below
.br
\(en \fBAlt+F3\fP: Search (in scrollback buffer)
.br
\(en \fBAlt+F4\fP: Close
.br
\(en \fBAlt+F8\fP: Reset
.br
\(en \fBAlt+F10\fP: Default terminal size (rows/columns)
.br
\(en \fBShift+Alt+F10\fP: Default terminal size (rows/columns) and font size
.br
\(en \fBAlt+F11\fP or \fBAlt+Enter\fP: Toggle full screen
.br
\(en \fBShift+Alt+F11\fP or \fBShift+Alt+Enter\fP: Toggle full screen and zoom font
(Note that due to the different height/width factors, this is not a precise operation)
.br
\(en \fBAlt+F12\fP: Flip screen
.br
\(en \fBAlt+Space\fP: Window menu
.br
\(en \fBCtrl+Tab\fP: Next visible window (as sorted by creation time)
.br
\(en \fBCtrl+Shift+Tab\fP: Previous visible window (as sorted by creation time)
.br
\(en \fBCtrl+Ctrl+Tab\fP: Next window (as sorted by creation time)
.br
\(en \fBCtrl+Ctrl+Shift+Tab\fP: Previous window (as sorted by creation time)
.br
\(en \fBCtrl+Alt+mouse-click/drag\fP: Move window

Multi-monitor selection support: Alt+F2 (or user-defined "new" key 
as defined with option \fBKeyFunctions\fP) will only spawn a new window 
after F2 has been released. While the key is being held, the target monitor 
can be selected with a sequence of numeric keypad keys:
.br
\(en cursor-up/down/left/right (8/2/4/6) navigate the target focus to the 
respective neighbour in the monitor grid; 
.br
\(en the diagonal keys (7/9/1/3) combine two directions respectively; 
.br
\(en the central key (5) sets the target focus to the Windows "primary" monitor; 
.br
\(en the Ins key (0) or Del resets the focus to the current monitor.
.br
These navigation controls can be applied repeatedly to select a monitor further away.

Note that a heuristic algorithm is used, based on the size of the smallest 
monitor attached to the system, so the target may not always be selected 
as expected if multiple monitors of different size are available or 
monitors are not arranged in a regular grid.
Note also that this feature is overridden by option \fBSessionGeomSync\fP.

.TP
\fBFont zoom\fP
.br
\(en \fBCtrl+(keypad-)plus\fP: Zoom font in
.br
\(en \fBCtrl+(keypad-)minus\fP: Zoom font out
.br
\(en \fBCtrl+Shift+(keypad-)plus\fP: Zoom font and window in
.br
\(en \fBCtrl+Shift+(keypad-)minus\fP: Zoom font and window out
.br
\(en \fBCtrl+zero\fP: Back to configured font size

.TP
\fBCtrl+Shift+letter shortcuts\fP

An alternative set of shortcuts for clipboard and window commands using
\fBCtrl+Shift+letter\fP combinations is available.  These can be enabled on the
Keys pane of the options dialog.
.br
\(en \fBCtrl+Shift+A\fP: Select all
.br
\(en \fBCtrl+Shift+C\fP: Copy
.br
\(en \fBCtrl+Shift+V\fP: Paste
.br
\(en \fBCtrl+Shift+N\fP: New
.br
\(en \fBCtrl+Shift+H\fP: Search scrollback buffer
.br
\(en \fBCtrl+Shift+W\fP: Close
.br
\(en \fBCtrl+Shift+R\fP: Reset
.br
\(en \fBCtrl+Shift+D\fP: Default terminal size (rows/columns)
.br
\(en \fBCtrl+Shift+F\fP: Full screen (not zooming font despite Shift)
.br
\(en \fBCtrl+Shift+S\fP: Flip screen
.br
\(en \fBCtrl+Shift+O\fP: Toggle scrollbar
.br
\(en \fBCtrl+Shift+P\fP: Cycle pointer styles
.br
\(en \fBCtrl+Shift+T\fP: Cycle or tune transparency levels

Ctrl+Shift+T cycles through transparency levels in steps, whenever 
Ctrl+Shift+T is released. Alternatively, while Ctrl+Shift+T is held down, 
the navigation keys on the numeric keypad can be used for further fine-tuning:
.br
Up/Dn to increase/decrease, PgUp/PgDn for steps, Del/Ins for no/max transparency, 
End for highest preconfigured transparency, Home for previous value, 
Clear ("5") for glass.
.br
If OpaqueWhenFocused is set, opaqueness is temporarily disabled to 
provide visible feedback for the changes.

.TP
\fBUser-defined shortcuts\fP
Function keys, special keys, and Ctrl+Shift+key combinations 
can be redefined to generate user-defined input or invoke functions.
See option \fBKeyFunctions\fP for details.

.SS Embedding graphics in terminal output

The Sixel graphics support feature facilitates a range of applications 
that integrate graphic images in the terminal, animated graphics, and even 
video and interactive gaming applications.

An example of the benefit of this feature is the output of `gnuplot` 
with the command
.br
GNUTERM=sixel gnuplot -e "splot [x=-3:3] [y=-3:3] sin(x) * cos(y)"

\fINote:\fP The number of Sixel images displayed on the screen is limited 
in order to prevent Windows handle resource exhaustion.

.TP
\fBImage support\fP
In addition to the legacy Sixel feature, mintty supports graphic image display 
(using iTerm2 controls). Image formats supported comprise
PNG, JPEG, GIF, TIFF, BMP, Exif.

.SS Emoji display support

Mintty supports display of emojis as defined by Unicode using 
emoji presentation, emoji style variation and emoji sequences.
The option \fBEmojis\fP can choose among sets of emoji graphics if 
deployed in a mintty configuration directory.
See the Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#emojis\fP 
about deployment of emoji graphics for mintty.

.SS HTML Screen dump

Mintty can create an HTML representation of the screen, from the extended 
context menu or using the respective xterm Media Copy escape sequence.
The HTML page is created in the start directory of mintty and uses a 
filename pattern of \fBmintty.date_time.html\fP. Screen layout and 
character attributes are reproduced as closely as possible.
If there is a current selection, the selected text will be included in the 
HTML dump, otherwise the current screen view is used. In the latter case, 
also a background image or pattern is reproduced, if its filename was 
configured as a relative path name using POSIX syntax (forward slashes).

If Shift is held, the function also opens the HTML page.

.SS Diagnostic support

.TP
\fBScreen logging\fP
A couple of options are available to enable logging initially 
(\fBLog=...\fP or \fB-l ...\fP on the command line), or to specify 
a log file name for later logging (\fBLog=...\fP combined with \fBLogging=no\fP, 
or \fB--logfile ...\fP on the command line).
In either case, logging can be toggled from the extended context menu.

.TP
\fBCharacter information display\fP
Diagnostic display of current character information can be toggled 
from the extended context menu.
.br
\fIUnicode character codes\fP at the current cursor position will then be displayed in the window title bar. (Note that mintty may precompose a combining character sequence into a combined character which is then displayed.)
.br
\fIUnicode character names\fP will be included in the display if the \fBunicode-ucd\fP package is installed in \fI/usr/share\fP (or the file \fIcharnames.txt\fP generated by the mintty script \fIsrc/mknames\fP is installed in the mintty resource subfolder \fIinfo\fP).
.br
\fIEmoji sequence "short names"\fP will be indicated if Emojis display is enabled.
.br
Note that the "normal" window title setting sequence 
and the character information output simply overwrite each other.

.SH CONFIGURATION

Mintty has a graphical options dialog that can be reached via the context menu
or the window menu.  It has the following action buttons:
.br
\(en \fBCancel\fP: discards changes.
.br
\(en \fBSave\fP: applies and saves changes and closes the dialog.
.br
\(en \fBApply\fP: applies changes to the current instance of mintty 
  but does not save them to the configuration file. So using \fBApply\fP 
  then \fBCancel\fP, local changes can be applied (and tested) without 
  affecting further instances of mintty.

In configuration files, settings are stored as \fINAME\fP=\fIVALUE\fP pairs,
with one per line.  By default, they are read from any file of 
\fI/etc/minttyrc\fP, \fI$APPDATA/mintty/config\fP, 
\fI~/.config/mintty/config\fP, \fI~/.minttyrc\fP, in this order.
Additional configuration files can be specified using the
\fB-c\fP/\fB--config\fP or \fB-C\fP/\fB--loadconfig\fP command line options.
These are read in order after the default config files, 
with settings in later files overriding those in earlier ones.
Configuration changes are saved to the last writable file 
read by default or \fI~/.minttyrc\fP if none is given, 
or (with precedence) to a configuration file specified with 
\fB-c\fP/\fB--config\fP or \fB--configdir\fP.
Individual settings can also be specified on the command line using the 
\fB-o\fP/\fB--option\fP.

\fINote:\fP Many string values in the config files, especially those 
referring to file names or Windows items, are \fBUnicode-enabled\fP, 
meaning they are expected to be UTF-8-encoded in the configuration 
file independently of the encoding the terminal runs in; as a fallback, 
if the configuration value is not valid UTF-8, it is interpreted in 
the system ANSI encoding.
(This does not apply to the same configuration settings when given on the 
command-line.)
.br
Unicode-enabled settings: BellFile, ThemeFile, Background, 
Title, ExitTitle, Icon, Log, 
Language, Font, Font1..., FontSample, FontChoice, 
Printer, Answerback, SixelClipChars, 
Class, AppID, AppName, AppLaunchCmd, 
DropCommands, UserCommands, SessionCommands, TaskCommands, 
KeyFunctions, SysMenuFunctions, CtxMenuFunctions, UserCommandsPath.

Be careful when running multiple instances of mintty. If options are saved 
from different instances, or the config file is edited manually, 
options can obviously be overwritten; if older mintty versions are run 
(e.g. from cygwin and msys sharing the same home directory), options 
may even get dropped from the configuration file; mintty versions since 
261 preserve unknown options and comment lines.

Additional resource files are used for colour schemes (option \fBThemeFile\fP, 
subdirectory \fIthemes\fP), wave files (option \fBBellFile\fP, subdirectory \fIsounds\fP), 
and localization translation files (option \fBLanguage\fP, subdirectory \fIlang\fP) 
within the mintty resource directories \fI/usr/share/mintty\fP, 
\fI$APPDATA/mintty\fP, \fI~/.config/mintty\fP, \fI~/.mintty\fP, 
or as specified with command line option \fB--configdir\fP.

The following sections explain the settings on each pane of the options
dialog, followed by settings that do not appear in the dialog.
For each setting, its name in the config file is shown in parentheses,
along with its default value.

If there is only a name in parentheses, there is currently 
no GUI configuration facility for that option 
(see also Hidden settings below).

.SS Looks
Settings affecting mintty's appearance.

.TP
\fBColours\fP
Clicking on one of the buttons here opens the colour selection dialog.
.br
In the settings (config file or command-line options), colours are 
represented as comma-separated RGB triples with decimal 8-bit values 
ranging from 0 to 255. X-style hexadecimal colour specifications such 
as #RRGGBB, rgb:RR/GG/BB or rgb:RRRR/GGGG/BBBB, 
cmy:C.C/M.M/Y.Y or cmyk:C.C/M.M/Y.Y/K.K can be used as well.
Also X11 color names are supported.
.br
\(en \fBForeground text colour\fP (ForegroundColour=191,191,191)
.br
\(en \fBBackground colour\fP (BackgroundColour=0,0,0)
.br
\(en \fBCursor colour\fP (CursorColour=191,191,191)
.br
\(en \fBUnderline, Strikeout, Overline colour\fP (UnderlineColour=-1)
.br
\(en \fBCtrl+mouse-move hovering colour\fP (HoverColour=-1)

\(en \fBTheme\fP (ThemeFile=): 
The popup menu offers theme files as stored in a resource subdirectory 
\fIthemes\fP for selection as a colour scheme.
The option can also be set to a filename (like D:/.../solarized-light.minttyrc).

The field can also be used as a drag-and-drop target for colour schemes 
downloaded from the Color Scheme Configurator, or for theme files from the web.
See the Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#using-colour-schemes-themes\fP 
about this mechanism.

Note: Mintty also provides the command-line script \fBmintheme\fP which can 
display the themes available in the mintty configuration directories or 
activate one of them in the current mintty window.

.TP
\fBTransparency\fP (Transparency=off)
Window transparency level, with the following choices:
.br
\(en \fBOff\fP
.br
\(en \fBLow\fP
.br
\(en \fBMedium\fP
.br
\(en \fBHigh\fP
.br
\(en \fBGlass\fP

The \fBGlass\fP option is only available on Vista and above with desktop
compositing enabled.
To make this reasonably usable, the glass colour needs to be set to be as dark
as possible in the Windows control panel: choose \fIPersonalize\fP from the
desktop context menu, click on \fIWindow Color\fP, turn the colour intensity up
to the maximum, show the colour mixer, and turn the brightness down to black.

Numeric transparency values ranging from 4 to 254 can be specified in config
files or on the command line.  (Values below 4 are multiplied by 16, for
backward compatibility reasons.)

.TP
\fBOpaque when focused\fP (OpaqueWhenFocused=no)
Enable to make the window opaque when it is active (to avoid background
distractions when working in it).

.TP
\fBCursor\fP (CursorType=line)
The following cursor types are available:
.br
\(en \fBLine\fP
.br
\(en \fBBlock\fP
.br
\(en \fBUnderscore\fP

The line cursor is displayed with the width set in the Accessibility Options
control panel / Ease of Access Center, mouse panel or Optimize visual display.

.TP
\fBCursor blink\fP (CursorBlinks=yes)
If enabled, the cursor blinks at the rate set in the Keyboard control panel.

.SS Text
Settings controlling text display.

.TP
\fBFont selection\fP
Clicking on the \fBSelect\fP button opens a dialog where the font and its
properties can be chosen.  Font styles other than \fBBold\fP are ignored.
In the config file, this corresponds to the following entries:
.br
\(en \fBFont\fP (Font=Lucida Console); only monospace fonts are listed
.br
\(en \fBFont style\fP (FontWeight=400, FontIsBold=no)
.br
\(en \fBSize\fP (FontHeight=9)
.br
The font selection dialog also offers an \fBApply\fP button for 
convenient testing how the selected font looks. Its function is the same 
as the \fBApply\fP button of the options dialog.

Further settings can be given in the config file:

\(en \fBFont boldness\fP (FontWeight=400): This is an implicit value after 
selecting a font in the font selection menu, or can be specified in the 
config file or on the command line for font selection. Typical weights 
are \fBNormal\fP/\fBRegular\fP (FontWeight=400) and \fBBold\fP (FontWeight=700 
or FontIsBold=yes) but if a font family has a different scheme or more than 
2 font weights, the weight value can be used for more specific selection.
If a font family has no bold weight but boldness was requested, mintty 
does not adhere to this scheme but enforces bold font selection; however, 
in this case the bold attribute may not be effective.

\(en \fBAlternative fonts\fP (Font1= ... Font10= , Font1Weight= ... Font10Weight=):
With these settings, up to 10 alternative fonts (and optionally weights) 
can be configured which would then be selectable via ECMA-48 SGR character attributes 
(see Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#text-attributes-and-rendering\fP).
.br
They can also be used as secondary fonts with option \fBFontChoice\fP.
.br
\fINote:\fP Font10 has a special preference property; if it is not configured, 
mintty will try to activate it anyway, looking for an installed 
Fraktur or Blackletter font (ECMA-48 "Gothic").
.br
\fINote:\fP The control sequence for alternative font 1 overrides the identical 
control sequence to select the VGA character set, which would thus be disabled. 
Configuring alternative font 1 is therefore discouraged.

\(en \fBChoice of script-specific secondary fonts\fP (FontChoice=):
With this setting, alternative fonts can be specified as secondary font 
for specific scripts.
The value is a series of semicolon-separated, colon-combined 
pairs of script name and alternative font number.
Script names are as specified in the Unicode file Scripts.txt, listed 
in \fIhttps://en.wikipedia.org/wiki/Script_(Unicode)\fP column "Alias".
(The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.)
.br
A special name is \fBPictoSymbols\fP to assign an alternative font to 
ranges of pictographic symbols from Unicode blocks matching 
Arrows, Mathematical Operators, Technical, Enclosed Alphanumerics, 
Pictographs, Control Pictures, Optical, Box Drawing, Miscellaneous.*Symbols, 
Block Elements, Geometric Shapes, Dingbats, Tiles, Cards, Emoticons, 
Transport, Alchemical, Chess.
.br
Another special name is \fBCJK\fP which comprises Han, Hangul, 
Katakana, Hiragana, Bopomofo, Kanbun, 
Halfwidth and Fullwidth Forms (except Latin). A later more specific entry 
will override an earlier one (see CJK example below).
.br
Finally, special name \fBPrivate\fP covers the Private Use ranges, which are 
often used for additional icon symbols (e.g. by "Nerd Fonts" or "Powerline" fonts).

.br
Example:
.br
  \fBFontChoice=Hebrew:6;Arabic:7;CJK:5;Han:8;Hangul:9\fP
.br
  \fBFont6=David\fP
.br
  \fBFont7=Simplified Arabic Fixed\fP
.br
  \fBFont5=Malgun Gothic\fP
.br
  \fBFont8=FangSong\fP
.br
  \fBFont9=MingLiU\fP
.br
  \fBFontChoice=PictoSymbols:2\fP
.br
  \fBFont2=DejaVu Sans Mono\fP

\(en \fBFont sample text\fP (FontSample=):
This hidden setting overrides the text for the "Sample" box in the Font chooser dialog.

\(en \fBShow "hidden" fonts\fP (ShowHiddenFonts=no):
This hidden setting enables display of monospace fonts in the font selection 
menu even if they are marked to Hide in the Windows Font settings (from the 
Control Panel \(em Fonts folder).

\(en \fBConfigure font chooser\fP (FontMenu=-1):
This hidden setting selects and tunes the font chooser dialog element.
Value 1 selects the Windows system font chooser unmodified;
value 2 enables font chooser localization,
adding value 4 (to 6 or 14) enables horizontal item scaling 
(making space for localized labels),
adding value 8 (to 10 or 14) enables item and size adjustments,
value -1 enables all tuning;
value 0 selects a built-in inline font chooser.

.TP
\fBText lines\fP (UnderlineManual=false)
By enabling this hidden setting, text attributes underline, doubly underline, 
strikeout and overline are enforced to be drawn manually. 
The default is to use Windows font variants for strikeout and for 
underline, unless mintty detects that the underlined font would not 
display properly.
Note that font smoothing may be affected by Windows-generated underline modes.

.TP
\fBEmoji support\fP (Emojis=none)
With this option, mintty emoji support is enabled and the emojis style 
is chosen. Mintty will match output for valid emoji sequences, 
presentation forms and emoji style selectors.
(Note that up to cygwin 2.10 it may be useful to set \fBCharwidth=unicode\fP in addition.)

Supported styles are:
.br
\(en \fBnone\fP Emoji support disabled; symbols are taken from the font.
.br
\(en \fBemojione\fP Use EmojiOne graphics.
.br
\(en \fBnoto\fP Use graphics from the Noto Emoji font.
.br
\(en \fBapple\fP Use Apple emoji graphics.
.br
\(en \fBgoogle\fP Use Google emoji graphics.
.br
\(en \fBtwitter\fP Use Twitter emoji graphics.
.br
\(en \fBfacebook\fP Use Facebook emoji graphics.
.br
\(en \fBsamsung\fP Use Samsung emoji graphics.
.br
\(en \fBwindows\fP Use Windows emoji graphics.

Note that all style options only work if the respective emoji graphics repository 
is deployed in a mintty resource directory, subdirectory \fIemojis\fP.
See the Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#emojis\fP 
for details.

.TP
\fBEmoji placement\fP (EmojiPlacement=stretch)
Emojis are displayed in the rectangular character cell group determined 
by the cumulated width of the emoji sequence characters. The following 
options are provided to tune their display:
.br
\(en \fBstretch\fP Emojis are scaled to fit in their display area.
.br
\(en \fBalign\fP Emojis are aligned in their display area.
.br
\(en \fBmiddle\fP Emojis are centered in their display area.
.br
\(en \fBfull\fP Emojis are full-size with original aspect ratio;
note that they may overlap into the next character(s).

.TP
\fBShow bold as font\fP (BoldAsFont=no)
This option sets the preferred rendering of the ANSI bold (or 'intense') 
text attribute to use a bold-style font; where a suitable bold variant of the 
selected font (that has the same width as the base font) is available, 
that is used; otherwise, the bolding is simulated by rendering the text 
twice with a one-pixel offset ('overstrike').
.br
(Corresponds roughly to the xterm resource \fBallowBoldFonts\fP.)

This option is not fully independent. 
If both BoldAsFont and BoldAsColour are true, both display methods are combined where applicable.
If both are false, xterm default behaviour is applied.
See \fBBold Behaviour\fP for an overview.

.TP
\fBShow bold as colour\fP (BoldAsColour=yes)
This option sets the preferred rendering of the ANSI bold (or 'intense') 
text attribute to use a different colour, usually with increased brightness;
it maps ANSI colours 0..7 (unless selected with the palette colour escape sequences) 
to their bright variants 8..15, and the default colour to a brightened variant. 
Rendering of other colours is not affected.
.br
(Corresponds largely to the xterm resource \fBboldColors\fP.)

This option is not fully independent. 
If both BoldAsColour and BoldAsFont are true, both display methods are combined where applicable.
If both are false, xterm default behaviour is applied.
See \fBBold Behaviour\fP for an overview.

.TP
\fBShow bold like xterm default\fP
With this interactive option, you can choose xterm default boldening behaviour 
by switching both bold as font and colour off. It can be switched off by 
switching one of the other options on.

.TP
\fBBold substitution colour\fP (BoldColour=)
This hidden option sets a colour to be used to render the bold attribute of 
text that would otherwise have the default foreground colour, overriding 
other bold rendering; it is only applied if option \fBBoldAsColour\fP is true.
The bold substitution colour can also be set, modified, enabled or disabled 
with the respective xterm OSC control sequences.
.br
(Corresponds to the xterm resources \fBcolorBD\fP and \fBcolorBDMode\fP.)

.TP
\fBBold as special background\fP (BoldAsRainbowSparkles=false)
This hidden option displays the bold attribute by underlaying special 
background. Overrides BoldAsFont. This is a fun option, use at your own risk.

.TP
\fBNote: Bold Behaviour\fP
When the bold text attribute is set, mintty distinguishes three classes of colours:
.br
\(en \fBDefault\fP: The default terminal foreground colour.
.br
\(en \fBANSI-8\fP: The ANSI colours 0..7 (used for SGR 30..37).
.br
\(en \fBExtended\fP: True colours and the rest of the 256 colours palette.
.br

The colour classes are affected by the bold text attribute as follows:
.br
\(en Extended colours are always shown with a boldened font only.
.br
\(en When both BoldAsFont and BoldAsColour are disabled, mintty engages a mode
similar to the xterm default behaviour: ANSI-8 is displayed with a bold font and
a different colour, Default colour only uses a bold font.
.br
\(en Otherwise, Default and ANSI-8 colours are affected by 
BoldAsFont and BoldAsColour independently, such that it is possible to 
choose only bold font, or only different colour, or both.
.br
\(en Note that Default bold display can be overridden by a BoldColour setting.

.TP
\fBAllow blinking\fP (AllowBlinking=no)
When text blinking is disabled, as it is by default, the blink attribute is
displayed as a bold background colour instead.

.TP
\fBFont smoothing\fP (FontSmoothing=default)
Select the amount of font smoothing in font rendering from the following choices:
.br
\(en \fBDefault\fP: Use Windows setting.
.br
\(en \fBNone\fP: With all the jaggies.
.br
\(en \fBPartial\fP: Greyscale anti-aliasing.
.br
\(en \fBFull\fP: Subpixel anti-aliasing ("ClearType").

Note that font smoothing may be affected by some Windows-generated 
font attributes; see UnderlineManual.

.TP
\fBFont rendering\fP (FontRender=uniscribe)
Select the rendering system used for text display:
.br
\(en \fBtextout\fP: Use the Windows ExtTextOut API.
.br
\(en \fBuniscribe\fP: Use the Windows Uniscribe API.

.TP
\fBLocale\fP (Locale=)
The locale setting consists of a lowercase two-letter or three-letter language
code followed by a two-letter country code, for instance \fBen_US\fP or
\fBzh_CN\fP.  The Windows default system and user locales are shown in the
drop-down list for this setting.  Alternatively, the language-neutral "C"
locale can be selected.

If no locale is set here, which is the default, mintty uses the locale and
character set specified via the environment variables \fILC_ALL\fP,
\fILC_CTYPE\fP or \fILANG\fP.

If the locale option is set, however, it will override any environment
variable setting: \fILC_ALL\fP and the \fILC_*\fP variables for specific
locale categories are cleared, while \fILANG\fP is set according to the
selected locale and character set.

\fINote:\fP This means, while not strictly necessary, that also locale variables 
unrelated to the terminal character set (e.g. LC_MESSAGES) are cleared 
to avoid confusion.

\fINote:\fP If the \fBLocale\fP option is set, mintty further checks whether 
the locale is a "wide" locale (i.e. ambiguous-width characters are wide 
in a CJK locale) but the selected font is actually "ambiguous-narrow" 
(i.e. ambiguous-width characters are narrow in the font, as detected at 
characters U+03B1 and U+2500) in which case it appends the 
"@cjknarrow" locale modifier, in order to adapt the selected locale to 
the chosen font.
(This would be overridden by setting \fBCharwidth=ambig-wide\fP.)

By default, the selected locale also determines the character width 
assumptions used for screen rendering. For exceptions, see the 
setting \fBCharwidth\fP and the control sequences for special wide character handling 
(\fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#wide-characters\fP).

.TP
\fBCharacter set\fP (Charset=)
The character set to be used for encoding input and decoding output.
If no locale is set, this setting is ignored.

\fINote:\fP
While changing the character set takes effect immediately for text input and
ouput, it does not affect the processes already running in mintty.
This is because the environment variables of a running process cannot be
changed from outside that process.
Therefore mintty should be restarted for a character set change to take full
effect, or the locale environment of the shell should be changed accordingly.

\fINote:\fP
The locale and character set can also be changed with an escape sequence, 
see the Control Sequences wiki page \fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#locale\fP.
That setting takes precedence; changes from the Options menu will silently 
have no effect unless an escape sequence with empty locale is sent 
to the terminal to restore to "default".

.SS Keys
Settings controlling keyboard behaviour.

.TP
\fBAuto-repeat keys\fP (AutoRepeat=on)
When setting this off, keyboard auto-repeat is ignored. Auto-repeat can also 
be switched dynamically with DECSET 8.

.TP
\fBBackarrow sends ^H\fP (BackspaceSendsBS=no)
By default, mintty sends \fB^?\fP (ASCII DEL) as the keycode for the backspace key.
If this option is enabled, \fB^H\fP is sent instead.
This also changes the \fBCtrl+Backspace\fP code from \fB^_\fP to \fB^?\fP.
.br
(Corresponds to the xterm resource \fBbackarrowKey\fP.)

.TP
\fBDelete sends DEL\fP(DeleteSendsDEL=no)
By default, mintty sends VT100 Remove as the keycode for the keypad Del key.
If this option is enabled, \fB^?\fP (ASCII DEL) is sent instead.
.br
(Corresponds to the xterm resource \fBdeleteIsDEL\fP.)

.TP
\fBCtrl+LeftAlt is AltGr\fP (CtrlAltIsAltGr=no)
The AltGr key on non-US Windows systems is a strange beast: pressing it is
synonymous with pressing the left Ctrl key and the right Alt key at the
same time, and Windows programs usually treat any Ctrl+Alt combination as
AltGr.

Some programs, however, chief among them Microsoft's very own Office, do not
treat Ctrl+LeftAlt as AltGr, so that Ctrl+LeftAlt combinations can be used in
command shortcuts even when a key has an AltGr character binding.

By default, mintty follows Office's approach, because a number of terminal
programs make use of Ctrl+Alt shortcuts.
The "standard" Windows behaviour can be restored by ticking the checkbox here.

The setting makes no difference for keys without AltGr key bindings
(e.g. any key on the standard US layout).

.TP
\fBAllow delay for AltGr detection\fP (CtrlAltDelayAltGr=0)
Some software managing and providing keyboard input does not handle 
AltGr properly; particularly TeamViewer is known for buggy behaviour 
as it does not provide Ctrl and Menu virtual key codes like Windows does.
With this option, some delay in milliseconds (suggested 16 or 20) can be 
allowed to detect a Ctrl+Menu sequence as AltGr.

.TP
\fBOld method of AltGr detection\fP (OldAltGrDetection=no)
Setting this hidden option would disable a workaround for an 
incompatibility in the Windows on-screen keyboard, 
just in case it has any side effects.

.TP
\fBSupport injection of external hotkeys\fP (SupportExternalHotkeys=2)
This setting supports external Alt+hotkey combinations, esp. Alt+F4 
to close the window, independently of general Alt+Fn shortcuts support 
(if option value is 2) and by fixing the buggy hotkey sequence sent 
by StrokeIt.

.TP
\fBCopy and Paste shortcuts\fP (ClipShortcuts=yes)
Checkbox for enabling the clipboard shortcuts \fBCtrl+Ins\fP for copying and
\fBShift+Ins\fP for pasting.

.TP
\fBMenu and Full Screen shortcuts\fP (WindowShortcuts=yes)
Checkbox for enabling the \fBAlt+Space\fP and \fBAlt+Enter\fP shortcuts for
showing the window menu and toggling full screen mode.

.TP
\fBSwitch window shortcuts\fP (SwitchShortcuts=yes)
Checkbox for enabling the \fBCtrl+Tab\fP shortcuts 
for switching between mintty windows cyclically.

.TP
\fBZoom shortcuts\fP (ZoomShortcuts=yes)
Checkbox for enabling the font zooming shortcuts \fBCtrl+plus/minus/zero\fP.

.TP
\fBAlt+Fn shortcuts\fP (AltFnShortcuts=yes)
Checkbox for enabling the use of combinations of Alt and functions keys as
shortcuts, for example \fBAlt+F4\fP for closing the window or \fBAlt+F11\fP
fortoggling  full screen mode.  Disable to have \fBAlt+Fn\fP combinations
sent to applications instead.

.TP
\fBCtrl+Shift+letter shortcuts\fP (CtrlShiftShortcuts=no)
Checkbox for enabling alternative clipboard and window command shortcuts
using \fBCtrl+Shift+letter\fP combinations such as \fBCtrl+Shift+V\fP for
paste or \fBCtrl+Shift+N\fP for starting a new session.

These can replace the \fBCtrl/Shift+Ins\fP and \fBAlt+Fn\fP shortcuts, whereby
they show up in menus only if the corresponding default shortcuts are disabled.

See the shortcuts section above for the list of shortcuts controlled by this
option.  When it is disabled, Ctrl+Shift+letter combinations are sent to
applications as C1 control characters instead.

.TP
\fBCompose key selection\fP (ComposeKey=off)
The modifier key selected here will have the function of a \fICompose key\fP.
Pressing and releasing the key, following by a sequence of composing keys, 
will enter a composition of them, according to X11 compose key data.
.br
The \fBOff\fP setting disables the Compose key.
.br
\(en \fBShift\fP
.br
\(en \fBCtrl\fP
.br
\(en \fBAlt\fP
.br
\(en \fBOff\fP

.SS Mouse
Settings controlling mouse support.

.TP
\fBCopy on select\fP (CopyOnSelect=yes)
If enabled, the region selected with the mouse is copied to the clipboard as
soon as the mouse button is released, thus emulating X Window behaviour.

.TP
\fBCopy as rich text\fP (CopyAsRTF=yes)
If this option is enabled, which it is by default, text is copied to the
clipboard in rich text format (RTF) in addition to plain text format.
RTF preserves colours and styles when pasting text into applications that
support it, e.g. word processors.

\fINote:\fP Copy as rich text is also available as an explicit item in 
the extended context menu.

The font used in RTF may be changed by the settings \fBCopyAsRTFFont\fP and 
\fBCopyAsRTFFontHeight\fP, to accommodate the case that the configured mintty 
font is not available when reading the contents (e.g. after sending it by mail).

.TP
\fBCopy as HTML\fP (CopyAsHTML=0)
With this option, mintty also copies text in HTML format, using flexible 
levels of HTML formatting, when applying the normal copy function.
.br
\(en \fB0\fP: do not include HTML
.br
\(en \fB1\fP: copy HTML text only (no font information)
.br
\(en \fB2\fP: copy HTML text (no global background)
.br
\(en \fB3\fP: copy HTML (close to screen layout)

\fINote:\fP Copy as HTML levels are also available as explicit items in 
the extended context menu.

.TP
\fBClicks place command line cursor\fP (ClicksPlaceCursor=no)
If enabled, the command line cursor can be placed by pressing the left
mouse button.
This works by sending the number of cursor keycodes needed to get to the
destination.

.TP
\fBRight mouse button\fP (RightClickAction=menu)
Action to take when the right mouse button is pressed.
.br
\(en \fBPaste\fP: Paste the clipboard contents.
.br
\(en \fBExtend\fP: Extend the selected region.
.br
\(en \fBEnter\fP: Simulate \fBEnter\fP/\fBReturn\fP key.
.br
\(en \fBMenu\fP: Show the context menu.

If this is set to \fBPaste\fP, the middle button extends the selected region
instead of pasting the clipboard. If it is set to \fBExtend\fP, a left click
with \fBShift\fP pressed pastes the clipboard instead of extending the
selection.

.TP
\fBMiddle mouse button\fP(MiddleClickAction=paste)
Action to take when the middle mouse button is pressed.
.br
\(en \fBPaste\fP: Paste the clipboard contents.
.br
\(en \fBExtend\fP: Extend the selected region.
.br
\(en \fBEnter\fP: Simulate \fBEnter\fP/\fBReturn\fP key.
.br
\(en \fBVoid\fP: Do nothing.

.TP
\fBDefault click target\fP (ClicksTargetApp=yes)
This applies to application mouse mode, i.e. when the application activates
xterm-style mouse reporting.
In that mode, mouse clicks can be sent either to the application to process
as it sees fit, or to the window for the usual actions such as select and paste.
.br
\(en \fBWindow\fP
.br
\(en \fBApplication\fP

.TP
\fBModifier key for overriding default\fP (ClickTargetMod=shift)
The modifier key selected here can be used to override the click target in
application mouse mode.
With the default settings, clicks are sent to the application and Shift needs
to be held to trigger window actions instead.
.br
The \fBOff\fP setting disables overriding.
.br
\(en \fBShift\fP
.br
\(en \fBCtrl\fP
.br
\(en \fBAlt\fP
.br
\(en \fBWin\fP
.br
\(en \fBOff\fP

.TP
\fBMouse auto-hiding\fP(HideMouse=on)
By default, mintty automatically hides the cross-hair mouse cursor when 
keyboard input is being entered. Setting this option =false keeps the cursor.
.br
(Corresponds to the xterm resource value \fBpointerMode:2\fP.)

.TP
\fBElastic text selection\fP(ElasticMouse=off)
With this option set, text selection with mouse dragging only includes 
first and last characters if they are spanned at least halfway, so just 
slightly touching a character leaves it out.

.SS Window
Window properties.

.TP
\fBColumns\fP (Columns=80)
Default width of the window, in character cells.

.TP
\fBRows\fP (Rows=24)
Default height of the window, in character cells.

.TP
\fBCurrent size\fP
Pressing this button sets the default width and height to the window's
current size.

.TP
\fB\fP(RowSpacing=0)
Additional row padding.

\fINote:\fP Mintty adjusts row spacing according to the font metrics, to 
compensate for tight or tall spacing of some fonts (e.g. Courier, Consolas, FreeMono, Monaco).
The RowSpacing value is added to that.
.br
(Corresponds roughly to the xterm resource \fBscaleHeight\fP.)

.TP
\fBLigatures support\fP (LigaturesSupport=0)
By default, ligatures, as supported by the selected font, are rendered 
if they are output to the terminal in one chunk. When this option is 
set =1, mintty redisplays the left part of the line whenever a character 
is output, so ligatures are also supported while being input.
With LigaturesSupport=2, mintty also redisplays the previous cursor line 
after the cursor is moved.

This option is not capable of disabling ligatures, however, as they are 
applied by Windows font handling. Setting \fIFontRender=textout\fP 
disables Uniscribe, including ligatures support.

.TP
\fB\fP(ColSpacing=0)
Additional column padding; ColSpacing=1 can avoid boldened glyphs being clipped.

.TP
\fB\fP(Padding=1)
Window padding; margin between text and window border. The effective value 
is limited by the character cell width (scaling with font zooming).
.br
(Corresponds to the xterm resource \fBinternalBorder\fP.)
.br
A negative value indicates that always the character cell width shall be used,
without fixed limit.

.TP
\fBScrollback lines\fP (ScrollbackLines=10000)
The maximum number of lines to keep in the scrollback buffer.

.TP
\fBScrollbar\fP (Scrollbar=right)
The scrollbar can be shown on either side of the window or just hidden.
By default, it is shown on the right-hand side.
.br
\(en \fBLeft\fP
.br
\(en \fBNone\fP
.br
\(en \fBRight\fP

.TP
\fBModifier for scrolling\fP (ScrollMod=shift)
The modifier key that needs to be pressed together with the arrow-up/down,
PgUp/PgDn, Home/End, or arrow-left/right keys to access the scrollback buffer.
.br
The default is \fBShift\fP.
The \fBOff\fP setting disables scrolling with keyboard shortcuts. 
A combined numeric value selects the respective combination of modifier keys.
.br
\(en \fBShift\fP (1)
.br
\(en \fBAlt\fP (2)
.br
\(en \fBCtrl\fP (4)
.br
\(en \fBWin\fP (8)
.br
\(en \fBSuper\fP (16)
.br
\(en \fBHyper\fP (32)
.br
\(en \fBOff\fP (0)

.TP
\fBPgUp and PgDn scroll without modifier\fP (PgUpDnScroll=no)
If this is enabled, the scrollback buffer can be accessed by just pressing
PgUp or PgDn, without the 'modifier for scrolling' selected above.
If the modifier is pressed anyway, plain PgUp/PgDn keycodes are sent to the
application.
This option does not affect the arrow keys or Home/End keys.

.TP
\fBUI localization language\fP (Language=)
This selects the language or language/region code to use for 
localization of the mintty user interface, the options dialog, 
menus, message boxes, and terminal in-line error messages.
.br
\(en \fI(empty)\fP an empty entry disables localization
.br
\(en \fB@\fP use the Windows user language setting
.br
\(en \fB*\fP use environment settings (variables \fILANGUAGE\fP, \fILC_ALL\fP, \fILC_MESSAGES\fP, \fILANG\fP)
.br
\(en \fB=\fP use the same language as the \fBLocale\fP setting (section Text)
.br
\(en \fI(language[_region])\fP use the given language or language/region code

See the Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#localization\fP 
about how to configure localization.

Note that Windows may already have localized the default entries of the 
system menu, which makes the system menu language inconsistent because 
mintty adds a few items here. Select \fILanguage=en\fP to 
"reverse-localize" this.

.SS Terminal
Terminal emulation settings.

.TP
\fBTerminal type\fP (Term=xterm)
The terminal type.  This determines the setting of the TERM environment variable
at mintty startup.
Choices available from the dropdown list are \fBxterm\fP, \fBxterm-256color\fP,
\fBxterm-vt220\fP, \fBvt100\fP, \fBvt220\fP, \fBvt340\fP, \fBvt420\fP, \fBvt525\fP,
\fBxterm-direct\fP, \fBmintty\fP, \fBmintty-direct\fP.

The last three options are only offered if the respective terminfo entries 
are installed in the system. The *\fB-direct\fP entries provide 
terminfo capabilities to set true-colour (24 bit colour) attributes.
Note, however, that this only affects usage of the \fIterminfo\fP API 
to drive the terminal; the respective control sequences are always available.

If the setting contains "vt220" or higher, xterm VT220-style function 
key mode is enabled instead of the default PC-style function key mode.
(This can otherwise be set with the DECSET 1061 control sequence.)

Apart from that, this setting has no effect on mintty's terminal emulation,
i.e. all the features are always available. However, the TERM setting 
may be used by applications to choose what features they can use, 
alternatively to the preferrable device attributes queries
(see \fIhttps://github.com/mintty/mintty/wiki/Tips\fP for hints).

The \fBxterm-256color\fP setting enables 256-color mode in some applications,
but may not be recognised at all by others, which is why plain \fBxterm\fP
is the default.

The \fBvt340\fP setting facilitates a terminal ID indication corresponding 
to the Sixel graphics feature. However, particularly the \fIgnuplot\fP 
tool uses a dedicated variable (\fBGNUTERM\fP) to trigger its usage.

(Corresponds roughly to the combined xterm resources 
\fBdecTerminalID\fP, \fBtermName\fP, \fBkeyboardType\fP.)

.TP
\fBAnswerback\fP (Answerback=)
The answerback string is sent in response to the \fB^E\fP (ENQ) character.
By default, this is empty.

.TP
\fBAlternate screen\fP (NoAltScreen=false)
With this setting, the alternate screen can be disabled.
(Corresponds to the xterm resource \fBtiteInhibit\fP, 
switchable by an escape sequence.)

.TP
\fBEnable 132-column mode switching\fP (Enable132ColumnSwitching=false)
With this setting, DECSET 3 escape sequences to switch 80/132 column modes 
are enabled initially. This can be changed later dynamically (DECSET 40).
(Corresponds to the xterm resource \fBc132\fP, switchable by an escape sequence.)

.TP
\fBApply old wraparound behaviour\fP (OldWrapModes=false)
Setting this compatibility option disables some tweaks and fixes of 
mintty 2.7.5:
.RS
\(en Backspace after pending Wraparound goes to previous column
.br
\(en Reverse Wraparound mode initially disabled (but switchable), complying with xterm default and terminfo
.RE

.TP
\fBAllow control sequence to set selection\fP (AllowSetSelection=false)
If enabled, the terminal control sequence OSC 52 is allowed to set the 
clipboard selection for pasting (using base64-encoded contents, like xterm).

.TP
\fBBell\fP
The options here determine what effects the bell character \fB^G\fP has.
Default beep and taskbar highlighting are enabled by default.
Mintty can also play wave sounds or frequency beeps.
.RS
\(en \fBBell system sound\fP (BellType=1): Preferred system sound, values:
.RS
\fB-1\fP : Simple Beep
.br
\fB0\fP : No Beep (overrides BellFile and BellFreq)
.br
\fB1\fP : Default Beep
.br
\fB2\fP : Critical Stop
.br
\fB3\fP : Question
.br
\fB4\fP : Exclamation
.br
\fB5\fP : Asterisk
.RE
\(en \fBWave\fP (BellFile=): 
The popup menu offers wave files as stored in a resource subdirectory 
\fIsounds\fP for selection. The option can also be set 
to a filename (like D:/.../soundfile.wav); this can be achieved also 
by drag-and-drop from a local file.
This setting overrides the Bell system sound except No Beep.
.br
\(en \fBPlay\fP: The button plays the selected sound for testing.
The sound is also played when it is changed.
.br
\(en \fBFlash\fP (BellFlash=no): Briefly flash the terminal or window.
(Corresponds to the xterm resource \fBvisualBell\fP.)
.br
\(en \fBFlash style\fP (BellFlashStyle=4): Tune the style to flash the 
terminal or window; this is a bitmask composed of the following values:
.RS
\fB1\fP : Flash the window frame (using Windows)
.br
\fB2\fP : Flash the outer character cells; not recommended;
  will look ragged with double-width characters
.br
\fB4\fP : Flash the whole terminal pane (all character cells)
.br
\fB8\fP : cell flash briefly inverts foreground and background;
  default is to moderately brighten the background colour
.br
\fB12\fP : (combining 4 and 8) classic bright full flash
.RE
\(en \fBHighlight in taskbar\fP (BellTaskbar=yes): Change the colour of mintty's
taskbar entry if the mintty window is not active.
(Corresponds to the xterm resource \fBbellIsUrgent\fP, 
switchable by an escape sequence.)
.br
\(en \fBPopup on bell\fP (BellPopup=no): Popup mintty to desktop foreground.
(Corresponds to the xterm resource \fBpopOnBell\fP, 
switchable by an escape sequence.)
.br
\(en \fBMinimum delay between bells\fP (BellInterval=100): Multiple bells within this many milliseconds will sound as one.
.br

A simple \fBfrequency beep\fP can be configured in the configuration file 
or on the command line:
.br
\(en\fB\fP (BellFreq=0): Beep sound frequency (overrides system sounds).
.br
\(en\fB\fP (BellLen=400): Beep sound length (applies to frequency beep).
.RE

.TP
\fBPrinter\fP (Printer=)
The ANSI standard defines control sequences ("Media Copy") for sending 
text to a printer,
which are used by some terminal applications such as the mail reader
\fBpine\fP.
The Windows printer to send such text to can be selected here.
By default, printing is disabled.
If printing gets disabled in the Options menu, an active print connection 
will be ended; if the printer is changed, an active print connection 
will be continued with the previous printer.

.TP
\fBPrompt about running processes on close\fP (ConfirmExit=yes)
If enabled, ask for confirmation when the close button or \fIAlt+F4\fP is 
pressed and the command invoked by mintty still has child processes.
This is intended to help avoid closing programs accidentally.
If possible, mintty also displays a list of running child processes, 
using the procps command if installed, or the ps command.

.TP
\fBSuppress properties and features controlled by escape sequences\fP
Using these options, the listed feature numbers are suppressed.
Each option may contain a comma-separated list of respective numbers.
Usage of these options is discouraged; users are not entitled to 
complain about side effects.
.RS
\(en (SuppressSGR=) Character attributes (CSI ... m).
.br
\(en (SuppressDEC=) DECSET private modes (CSI ? ... h/l).
.br
\(en (SuppressWIN=) Window operations (CSI ... t); 24 means >= 24.
.br
\(en (SuppressOSC=) Window configuration commands (OSC ... ST).

See \fIhttps://github.com/mintty/mintty/wiki/Tips#text-attributes-and-rendering\fP
for an overview of SGR attributes.
.br
See \fIhttp://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\fP
for a full listing of escape control sequences.
.br
For some of the option values, more specific configuration parameters exist:
.br
\(en AllowBlinking=false \(<> SuppressSGR=5,6
.br
\(en Enable132ColumnSwitching=false \(~~ SuppressDEC=3 (permanent)
.br
\(en NoAltScreen=true \(~~ SuppressDEC=47,1047,1048,1049 (switchable)
.br
\(en AllowSetSelection=false \(<> SuppressOSC=52
.RE

.TP
\fBSuppress mouse wheel\fP (SuppressMouseWheel=)
With this setting, certain effects of mouse wheel rolling can be disabled.
The option is a list of action tags:
.RS
\(en \fBscrollwin\fP do not mouse-scroll the scrollback buffer (scrollbar not affected)
.br
\(en \fBscrollapp\fP do not simulate scrolling in applications by sending cursor escape sequences
.br
\(en \fBzoom\fP do not mouse-zoom font size (same as ZoomMouse=no)
.br
\(en \fBreport\fP do not report mouse wheel events in application mouse modes
.RE

.SS Command line
The settings here are config file versions of command line options
described in the OPTIONS section.  They do not appear in the options dialog.

.TP
\fBHolding the window open\fP (Hold=start)
The \fBHold\fP setting determines whether to keep the terminal window open when
the command has finished and no more processes are connected to the terminal.
It takes the following values:
.br
\(en \fBnever\fP: Don't keep the window open.
.br
\(en \fBstart\fP: Only keep the window open if the command exited with
status 255, which is used to indicate failure to start the command.
This is the default.
.br
\(en \fBerror\fP:  Keep the window open if the command exited with a non-zero
status or it was terminated by a signal indicating a runtime error.
.br
\(en \fBalways\fP: Always keep the window open.

.TP
\fBWindow icon\fP (Icon=)
The \fBIcon\fP setting with format \fIFILE\fP[\fB,\fIINDEX\fP] allows to load
the window icon from an executable, DLL, or icon file.
The optional comma-separated index can be used to select a particular icon in
a file with multiple icons.

If the setting is empty, as it is by default, mintty's program icon is used, 
unless mintty was invoked from a desktop shortcut in which case it uses 
the shortcut icon.

For interaction problems of icon, shortcut, and the Windows taskbar, 
see the note for the -i option above.

.TP
\fBLog file\fP (Log=)
The \fBLog\fP setting can be used to specify a log file that all output is
copied into.  If it is empty, as it is by default, no logging is done.
If it contains \fB%d\fP it will be substituted with the process ID.
If it contains \fB%\fP placeholders other than a single \fB%d\fP, 
the log file name will be constructed by calling strftime(3) on the 
pattern; note that this is likely to fail if a placeholder expands with 
"/" (%D).

If the log file name is a relative path name, it is relative from the 
working directory mintty was started in. To avoid failure to create a 
log file (especially when starting from the Start menu), the following 
tweak is applied: If mintty was started from a Windows shortcut with 
no working directory ("Start in:") specified and the effective start 
directory is within the Windows system directory hierarchy, 
mintty changes to the user's home directory first, 
except in WSL support mode where %LOCALAPPDATA%/Temp is used.

Note: If the requested log file exists already, mintty does not overwrite it 
but reports an error. To configure logging in the config file, use some 
\fB%\fP placeholders to create distinct log files.
Note that logging can be toggled from the extended context menu.

See also the \fIscript\fP(1) utility for a more flexible logging solution.

.TP
\fBLogging initially enabled\fP (Logging=yes)
Disabling this setting disables logging initially.
If a log file name is specified with \fBLog=...\fP and \fBLogging=no\fP,
logging can be enabled (and toggled) from the extended context menu.

.TP
\fBWindow title\fP (Title=)
The \fBTitle\fP setting can be used to determine the initial window title.
If it is empty, as it is by default, the title is set to the command being run.

.TP
\fBUtmp record\fP (Utmp=no)
If enabled, an entry for the session is written into the system's \fIutmp\fP
file for recording logins, so that the session appears for example in the
output of the \fIwho\fP(1) utility.

.TP
\fBInitial window state\fP (Window=normal)
This setting determines how the terminal window should be shown at startup:
.br
\(en \fBnormal\fP (default)
.br
\(en \fBmin\fP (minimized)
.br
\(en \fBmax\fP (maximized)
.br
\(en \fBfull\fP (full screen)
.br
\(en \fBhide\fP (invisible)

.TP
\fBWindow position\fP (X=, Y=)
\fBX\fP and \fBY\fP are integer settings that can be used to determine the
initial coordinates of the top left corner of the terminal window.
By default, these are unset, which means that the position suggested by the
window manager is used.

.TP
\fBWindow class name\fP (Class=mintty)
The \fBClass\fP setting determines the name of the window class of the terminal window.
It can be used to distinguish or group different mintty windows, e.g. for 
the mintty session switcher, or for Windows scripting tools such as AutoHotKey.

For a flexible grouping configuration, the Class option supports the 
same \fB%s\fP placeholder parameters as the AppID option.

.SS "Hidden" settings
The following settings appear neither in the options dialog nor as command line
options, which means they can only be set in config files or using the
\fB--option\fP or \fB-o\fP command line option.

.TP
\fBCustomize Options dialog\fP (OldOptions=)
Listing comma-separated tags in this setting will disable extended or 
enhanced parts of the Options dialog.
.br
\(en \fBbold\fP Disable "Show bold" section with "xterm" pseudo option.
.br
\(en \fBemoji\fP Disable emoji style section in "Text" panel.
.br
\(en \fBselection\fP Disable separate "Selection" panel.

.TP
\fBAccelerate display speed\fP (DisplaySpeedup=6)
If mintty processes high volume of output, it will skip up to the given 
number of refresh intervals (of 16ms each) in order to save output that 
is visually scrolled off right away, so effectively increasing output speed.
The maximum value is 9.

.TP
\fBDecelerate display speed to virtual serial transmission rate\fP (Baud=0)
This setting can demonstrate a legacy feeling of a serial terminal connection.
Typical baud rates (as supported by DEC VT420) were 
300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 56700, 76800, 115200.

.TP
\fBBloom effect around characters\fP (Bloom=0)
This setting enables a rough simulation of old CRT terminals' bloom effect.

.TP
\fBClear selection highlighting on input\fP (ClearSelectionOnInput=true)
When this is disabled, keyboard input or pasting does not clear selection highlighting.

.TP
\fBSuspend output while selecting\fP (SuspendWhileSelecting=8080)
During drag-selects, the user may want the screen to hold still 
to be selected from. Mintty can suspend processing of terminal output 
for a while; if the buffer exceeds the size configured with this parameter 
(in bytes), output is flushed. Setting it to 0 disables the feature.

.TP
\fBTrim trailing space from selection on copy\fP (TrimSelection=true)
When this is disabled, trailing space that was written to the terminal 
in a line is included in the selection buffer.
(Corresponds to the xterm resource \fBtrimSelection\fP.)

.TP
\fBSelection size indication\fP (SelectionShowSize=0)
The current selection size can optionally been indicated with a popup, 
with a value between 1 and 12, setting the popup position by clock hour.

.TP
\fBShow hyperlink in window title when hovering\fP (HoverTitle=true)
With this setting, display of an explicit hyperlink (OSC 8 attribute) 
in the window title when hovering can be disabled.

.TP
\fBSingle-dash long options\fP (ShortLongOpts=false)
This settings enables names options ("long options") on the command line 
to be given with only one dash rather than a double dash.

.TP
\fBCharacter width handling\fP (Charwidth=locale)
With this option, locale-determined character width properties can be overridden:
.br
\(en \fBlocale\fP Use locale width properties.
.br
\(en \fBunicode\fP Use built-in width properties, 
likely based on a more up-to-date Unicode version.
(Corresponds to the xterm resource \fBmkWidth\fP.)
.br
\(en \fBambig-wide\fP Use built-in width properties, 
with ambiguous-width characters assumed to be wide.
(Corresponds to the xterm resource \fBcjkWidth\fP.)

\fINote:\fP If this option selects using built-in width properties, 
the response to the Secondary Device Attributes request will report 
the built-in Unicode version as its third parameter.

\fIWarning:\fP With this option, actual width properties as rendered 
on the screen and width assumptions of the \fBwcwidth\fP function will be 
inconsistent for the impacted characters, which may confuse 
screen applications (such as editors) that rely on \fBwcwidth\fP information.

.TP
\fBCharacter narrowing factor\fP (CharNarrowing=75)
Depending on the font and font fallback (either by Windows means or 
via option \fBFontChoice\fP), some glyphs may be too wide for the 
character cell grid. Mintty applies automatic narrowing heuristics 
to fit such glyphs into a character cell so they do not overlap 
subsequent characters.
With this setting, the horizontal scaling for narrowed characters can 
be adjusted between 50% and 100%.

.TP
\fBBidirectional rendering\fP (Bidi=2)
With this option, bidi rendering support can be disabled conditionally 
or completely. Note that this can also be changed by an escape sequence.
Also there is another escape sequence to disable bidi per screen line.
.br
\(en \fB0\fP Disable bidi completely.
.br
\(en \fB1\fP Disable bidi on alternate screen, support it on normal screen.
.br
\(en \fB2\fP Enable bidi (default).

.TP
\fBApplication ID\fP (AppID=)
Windows 7 and above use the application ID for grouping taskbar items.
By default this setting is empty, in which case Windows groups taskbar
items automatically based on their icon and command line.  This can be
overridden by setting the AppID to a custom string, in which case windows
with the same AppID are grouped together.

The AppID option supports up to 5 \fB%s\fP placeholder parameters for 
a flexible grouping configuration, also supporting positional parameters 
\fB%N$s\fP (N = 1..5), to be replaced with these values:
.br
\(en \fB%1$s\fP: system name (e.g. \fBCYGWIN\fP)
.br
\(en \fB%2$s\fP: system release
.br
\(en \fB%3$s\fP: machine type (\fBi686\fP/\fBx86_64\fP)
.br
\(en \fB%4$s\fP: icon name if started from shortcut
.br
\(en \fB%5$s\fP: WSL distribution name if selected

The special value \fBAppID=@\fP causes mintty to derive an implicit AppID 
from the WSL system name, in order to achieve WSL distribution-specific 
taskbar grouping. This resolves taskbar grouping problems in some cases 
(wsltty issue #96) but causes similar problems in other cases (issue #784).

\fIWarning:\fP Using this option for a mintty window started from 
a Windows shortcut (desktop, taskbar, start menu) may 
cause trouble with taskbar grouping behaviour. If you need to do that, 
the shortcut itself should also get attached with the same AppId.

\fINote:\fP Since 2.9.6, if mintty is started via a Windows shortcut 
which has its own AppID, it is reused for the new mintty window in order 
to achieve proper taskbar icon grouping. This takes precedence over an 
explicit setting of the AppID option.

\fIExplanation:\fP Note that Windows shortcut files have their own AppID.
Hence, if an AppID is specified in the mintty settings, but not on a 
taskbar-pinned shortcut for invoking mintty, clicking the pinned 
shortcut will result in a separate taskbar item for the new mintty window, 
rather than being grouped with the shortcut.

\fIHint:\fP To avoid AppID inconsistence and thus ungrouped taskbar icons,
the shortcut's AppID should to be set to the same string as the mintty AppID, 
which can be done using the \fBwinappid\fP utility available in 
the mintty utils repository \fIhttps://github.com/mintty/utils\fP.
As noted above, since mintty 2.9.6, the mintty AppID does not need to be set 
anymore in this case.

.TP
\fBApplication Taskbar Shortcut Title\fP (AppName=)
The title of the Windows 7 taskbar shortcut. If the shortcut is pinned, 
the title is kept only if it was made persistent as described for 
AppLaunchCmd.

.TP
\fBApplication Taskbar Shortcut Launch Command\fP (AppLaunchCmd=)
The command to use if a shortcut pinned to the Windows 7 taskbar is invoked.
This is only effective if combined with an AppName option and the 
command-line option --store-taskbar-properties to make it persistent.
It should also be combined with an explicit and unique AppID.

\fINote:\fP The command must be given in Windows pathname syntax (e.g. 
AppLaunchCmd=\(aqC:\\cygwin\\bin\\mintty -T mytitle -\(aq).

\fINote:\fP An explicit icon supplied with the -i option can also be stored 
with the persistent properties; note, however, that for this purpose, 
it must be given in Windows pathname syntax and it must include a 
resource index; also, for consistent appearance, another -i option 
referring to the same icon should be included in the AppLaunchCmd 
(if the mintty invocation does not include an icon parameter but was 
started from a desktop shortcut, the icon in the AppLaunchCmd should 
be consistent with that one, respectively).

Example:
mintty -o AppID=Mintty.PinTest.1 -o AppName=Mintty.PinTest -o AppLaunchCmd="C:\\cygwin\\bin\\mintty -i /cygdrive/c/Windows/System32/calc.exe -" -i C:\\Windows\\System32\\calc.exe,0 --store-taskbar-properties -

\fBWarning:\fP Once made persistent, the stored properties associated with 
a specific AppID cannot be removed or even modified again with normal means.
For this reason, it is advisable to use temporary AppIDs for testing 
(like MyMintty.1).

.TP
\fBWord selection characters\fP (WordChars=)
By default, this string setting is empty, in which case double-click word
selection uses the default algorithm that is geared towards picking out
file names and URLs.

If a string is specified here, word selection only picks out characters in the
string along with alphanumeric characters.  For example, specifying just the
underscore character (WordChars=_) would allow selecting identifiers in many
programming languages.

.TP
\fBWord selection exclusion characters\fP (WordCharsExcl=)
This string can list characters that are to be excluded from word selection.

.TP
\fBFiltering pasted text\fP (FilterPasteControls=)
With this setting, pasted text can be filtered for selected control 
characters which are then replaced by space. Filtering is not applied 
when Control is held while pasting. The option is a comma-separated list 
of character tags:
.br
\(en \fBBS\fP Backspace
.br
\(en \fBHT\fP TAB
.br
\(en \fBNL\fP Line feed (new line)
.br
\(en \fBCR\fP Carriage return (enter)
.br
\(en \fBFF\fP Form feed
.br
\(en \fBESC\fP Escape
.br
\(en \fBDEL\fP DEL
.br
\(en \fBC0\fP other control characters < \(aq \(aq
.br
\(en \fBC1\fP control characters 0x80...0x9F
.br
(Corresponds to the xterm resource \fBdisallowedPasteControls\fP.)

.TP
\fBSpecial key remapping\fP [DEPRECATED, see \fBKeyFunctions\fP]
These options can attach a specific string to some special keys.
If the string is a number, a corresponding Escape sequence will be generated, 
applying Shift/Ctrl/Alt modifiers, following the pattern of function keys.
.br
If the string value contains a single control character, some generic 
Alt or Shift modification is applied.
For \fBPause\fP and \fBBreak\fP, control characters are the default values, 
they can be cleared with an empty assignment. For empty values, the default 
layout of the keyboard is applied.
The \fBBreak\fP key can also be assigned the traditional terminal line 
Break function.
.br
\(en \fBKey_Pause\fP=^] \fI(Ctrl+])\fP
.br
\(en \fBKey_Break\fP=^\\ \fI(Ctrl+\\)\fP
.br
\(en \fBKey_Menu\fP=
.br
\(en \fBKey_ScrollLock\fP=
.br
\(en \fBKey_PrintScreen\fP= \fI(key press event typically not sent)\fP

Examples:
.br
Key_Menu=29 would make the Menu key send the same escape sequence as in xterm
.br
Key_Break=2 would turn the Break key into an Insert key
.br
Key_Break=_BRK_ would assign the simulated terminal line Break function

.TP
\fBUser-defined shortcuts (KeyFunctions=)\fP
With this setting, function keys, modified function keys, and 
Ctrl+Shift+key combinations can be mapped to invoke specific functions 
or generate user-defined input.
The value is a series of semicolon-separated, colon-combined 
pairs of key and action descriptors
(if a semicolon shall be embedded into any of the action descriptors, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it).
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.
.br
(Corresponds roughly to the xterm resource \fBtranslations\fP.)

Supported keys are described as follows:
.br
\(en function keys F1...F24
.br
\(en modified function keys or special keys (see below), preceded with a 
combination of C, A, S, W, U, Y, in this order, 
indicating Ctrl, Alt, Shift, Win, Super, Hyper as combined with the key, 
attached with a "+" separator, e.g. \fBCS+F9\fP;
or a prefix "*" that applies the definition for all modified variations 
of the key, e.g. \fB*Menu\fP
.br
\(en special keys (some of which do not occur on typical keyboards) 
and keypad keys, as well as modified special and keypad keys; 
Space, Enter, Esc and Tab are only considered with at least one modifier
  Esc, Tab
  Enter, KP_Enter
  Space, Back
  Pause, Break
  ScrollLock, NumLock, CapsLock
  (PrintScreen)
  LWin, RWin
  Menu
  Insert, KP_Insert
  Delete, KP_Delete
  Home, KP_Home
  End, KP_End
  Prior, KP_Prior
  Next, KP_Next
  Left, KP_Left
  Right, KP_Right
  Up, KP_Up
  Down, KP_Down
  KP_Begin \fI(the middle "5" key)\fP
  KP_Divide, KP_Multiply, KP_Subtract, KP_Add
  Select, Print, Exec, Help, Sleep, Attn
  CrSel, ExSel, ErEof
  Play, Zoom
.br
\(en any character reachable on the keyboard without Shift, considered if 
pressed while Ctrl and Shift are also held; AltGr-generated characters 
are supported; Alt and Win modifiers are supported, 
e.g. \fBx\fP for Ctrl+Shift+x, \fBW+x\fP for Ctrl+Win+x, \fBAW+x\fP for Alt+Win+x

\fINote:\fP A key that needs a modifier already to be sent (e.g. Break 
which is often Ctrl+Pause) also needs that modifier in the key definition 
to be matched.

\fINote:\fP Like in xterm, a key redefinition takes precedence over 
modifyOtherKeys mode (ESC sequence). Shortcut override mode however 
disables key redefinitions.

\fINote:\fP For the "any character, with Ctrl and Shift" option, 
the definition is ignored if the Ctrl+Shift+key combination would 
generate a valid input character already. This is particularly the case 
if a valid control character is mapped to the key in the keyboard layout.
E.g. if you add a definition for Ctrl+Shift+minus and Shift+minus is "_" 
(underline) on the keyboard, the user-defined key function will be ignored, 
in order to prevent that input of Ctrl+_ would be inhibited.

Supported actions are described as follows:
.br
\(en \fB"\fP\fIstring\fP\fB"\fP or \fB\(aq\fP\fIstring\fP\fB\(aq\fP: enters the literal string
.br
\(en \fB^\fP\fIchar\fP: enters a control char ('@'...'_' or '?' for DEL)
.br
\(en \fB\`\fP\fIcommand\fP\fB\`\fP (**): enters the output of the command
.br
\(en \fInumber\fP (***): enters the escape sequence CSI\fInumber\fP[;\fImod\fP]~
.br
\(en \fBfullscreen\fP (*): switches to fullscreen mode
.br
\(en \fBtoggle-fullscreen\fP (*): toggles fullscreen mode
.br
\(en \fBwin-max\fP: resizes to window size
.br
\(en \fBwin-restore\fP: resizes to normal size
.br
\(en \fBwin-toggle-max\fP: toggles maximized / normal size
.br
\(en \fBwin-icon\fP: turns window into icon
.br
\(en \fBclose\fP: closes terminal window
.br
\(en \fBnew-key\fP: opens a new terminal window when key is released
.br
\(en \fBnew-window\fP: opens a new terminal window
.br
\(en \fBoptions\fP: opens the Options dialog
.br
\(en \fBmenu-text\fP (*): opens the context menu at the cursor position
.br
\(en \fBmenu-pointer\fP (*): opens the context menu at the mouse position
.br
\(en \fBsearch\fP: opens the search bar
.br
\(en \fBdefault-size\fP (*): switches to default terminal size
.br
\(en \fBscrollbar-outer\fP: toggles the scrollbar (xterm compatible)
.br
\(en \fBscrollbar-inner\fP: toggles the scrollbar (mintty legacy)
.br
\(en \fBcycle-pointer-style\fP: cycles the pointer style
.br
\(en \fBcycle-transparency-level\fP: cycles the transparency level
.br
\(en \fBcopy\fP: copies the selection to the clipboard
.br
\(en \fBcopy-text\fP: copies text only
.br
\(en \fBcopy-rtf\fP: copies rich text format
.br
\(en \fBcopy-html-text\fP: copies HTML text only (no font information)
.br
\(en \fBcopy-html-format\fP: copies HTML text (no global background)
.br
\(en \fBcopy-html-full\fP: copies HTML (close to screen layout)
.br
\(en \fBpaste\fP: pastes from the clipboard
.br
\(en \fBpaste-path\fP: pastes and tries to convert path syntax
.br
\(en \fBcopy-paste\fP: copies and pastes
.br
\(en \fBselect-all\fP: selects all text including scrollback
.br
\(en \fBclear-scrollback\fP: clears the scrollback
.br
\(en \fBtoggle-vt220\fP: toggles VT220 keyboard mode
.br
\(en \fBtoggle-auto-repeat\fP: toggles auto-repeat keys mode
.br
\(en \fBcopy-title\fP: copies the window title to the clipboard
.br
\(en \fBlock-title\fP: locks the window title from being changed
.br
\(en \fBreset\fP: resets the terminal
.br
\(en \fBbreak\fP: sends a break condition to the application
.br
\(en \fBflipscreen\fP: switches the alternate screen
.br
\(en \fBopen\fP: opens the selection, e.g. a URL or filename
.br
\(en \fBtoggle-logging\fP: toggles logfile logging
.br
\(en \fBtoggle-char-info\fP: toggles character info display
.br
\(en \fBexport-html\fP (*): exports the screen as an HTML file
.br
\(en \fBprint-screen\fP: print screen contents
.br
\(en \fBtoggle-bidi\fP: toggles (global) bidi disabling
.br
\(en \fBvoid\fP: do nothing
.br
\(en \fBsuper\fP: use this key as Super modifier key
.br
\(en \fBhyper\fP: use this key as Hyper modifier key
.br
\(en \fBscroll_top\fP: scroll scrollback view to beginning
.br
\(en \fBscroll_end\fP: scroll scrollback view to end
.br
\(en \fBscroll_pgup\fP: scroll scrollback view one page up
.br
\(en \fBscroll_pgdn\fP: scroll scrollback view one page down
.br
\(en \fBscroll_lnup\fP: scroll scrollback view one line up
.br
\(en \fBscroll_lndn\fP: scroll scrollback view one line down
.br
\(en \fBscroll_prev\fP: scroll scrollback view to previous marker
.br
\(en \fBscroll_next\fP: scroll scrollback view to next marker
.br

\(en \fBswitch-prev\fP: switch to previous virtual tab
.br
\(en \fBswitch-next\fP: switch to next virtual tab
.br
\(en \fBswitch-visible-prev\fP: switch to previous virtual tab which is not iconized
.br
\(en \fBswitch-visible-next\fP: switch to next virtual tab which is not iconized
.br

\fINote (*):\fP The exact behaviour of some actions depends on the 
state of the Shift key.

\fINote (**):\fP For external commands as key functions, the same 
additional functionality is provided as for context menu user commands 
(option \fBUserCommands\fP): environment variables and PATH substitution;
the PATH environment for the external command can be set up 
with option \fBUserCommandsPath\fP.

\fINote (***):\fP An unquoted \fInumber\fP causes mintty to form a 
function key sequence, applying all modifiers.

\fINote:\fP To just disable the built-in shortcut (and not override it 
with a user-defined one), but further process the key as normal input, 
leave the action empty, but include the colon.

\fINote:\fP To disable the built-in shortcut and not process the key either, 
use the "\fBvoid\fP" dummy action.

\fINote:\fP An invalid action (like "foo") will make mintty beep on the key.

\fINote:\fP If an assignment to any of the Lock keys 
is defined, mintty will compensate for its implicit state change effect.

Examples:
.br
\(en \fBKeyFunctions=d:\`echo -n \`date\`\`;A+F4:;CA+F12:break;-:"minus"\fP
will input the current date on Ctrl+Shift+d, disable window closing with Alt+F4,
send a BRK on Ctrl+Alt+F12, but likely not input "minus" on Ctrl+Shift+minus 
because Shift+minus is an underline on many keyboard layouts which has a 
Ctrl+_ assignment already
.br
\(en \fBKeyFunctions=c:copy;v:paste\fP in combination with setting 
\fB-o CtrlExchangeShift=true\fP will assign copy/paste to ^C and ^V 
for Windows addicts
.br
\(en \fBKeyFunctions=A+Enter:void;A+KP_Enter:\fP will disable zooming 
on Alt+Enter and also disable it on Alt+keypad-Enter but enter ESC Return 
in the latter case
.br
\(en \fBKeyFunctions=*CapsLock:super\fP assigns the Super modifier to 
the CapsLock key
.br
\(en \fBKeyFunctions=*Menu:29\fP turns the Menu key into an F16 function key 
(xterm default) and applies all modifiers to it
.br
\(en \fBKeyFunctions=S+KP_Prior:scroll_pgup;C+KP_Prior:scroll_pgup;C+KP_Next:scroll_pgdn;S+KP_Next:scroll_pgdn\fP 
enables scrollback scrolling with either of Shift or Control modifiers

.TP
\fBUse system colours\fP (UseSystemColours=no)
If this is set, the Windows-wide colour settings are used
instead of the foreground, background, and cursor colours chosen on the Looks
page of the options dialog.

.TP
\fBIME cursor colour\fP (IMECursorColour=)
The cursor colour can be set to change when the Input Method Editor (IME) for
entering characters not available directly on the keyboard is active.
The setting is a RGB triplet such as 255,0,0 for bright red.

By default, this is unset, which means that the cursor colour does not change.
The colour can also be changed using xterm's OSC 4 control sequence with
colour number 262.

.TP
\fBANSI colours\fP
These are the 16 ANSI colour settings along with their default values.
Colours are represented as comma-separated RGB triples with decimal 8-bit values
ranging from 0 to 255. 
X-style hexadecimal colour specifications such as #RRGGBB, 
rgb:RR/GG/BB or rgb:RRRR/GGGG/BBBB, 
cmy:C.C/M.M/Y.Y or cmyk:C.C/M.M/Y.Y/K.K can be used as well.
Also X11 color names are supported.
.br
\(en \fBBlack\fP=0,0,0
.br
\(en \fBRed\fP=191,0,0
.br
\(en \fBGreen\fP=0,191,0
.br
\(en \fBYellow\fP=191,191,0
.br
\(en \fBBlue\fP=0,0,191
.br
\(en \fBMagenta\fP=191,0,191
.br
\(en \fBCyan\fP=0,191,191
.br
\(en \fBWhite\fP=191,191,191
.br
\(en \fBBoldBlack\fP=64,64,64
.br
\(en \fBBoldRed\fP=255,64,64
.br
\(en \fBBoldGreen\fP=64,255,64
.br
\(en \fBBoldYellow\fP=255,255,64
.br
\(en \fBBoldBlue\fP=96,96,255
.br
\(en \fBBoldMagenta\fP=255,64,255
.br
\(en \fBBoldCyan\fP=64,255,255
.br
\(en \fBBoldWhite\fP=255,255,255

.TP
\fBDownloaded colour scheme\fP (ColourScheme=)
This setting is not intended for manual configuration. It can store a 
colour scheme as downloaded from the Color Scheme Configurator or from a 
theme file on the web via drag-and-drop to the Theme of the Options menu.
After the colour scheme is stored to a colour scheme file, this setting 
is not used anymore.

See the Tips wiki page \fIhttps://github.com/mintty/mintty/wiki/Tips#using-colour-schemes-themes\fP 
about this mechanism.

.TP
\fBSelection highlight colours\fP
The highlighting colours of selected text can be configured.
.br
\(en \fBHighlightBackgroundColour\fP= selected text background 
(corresponds to the xterm resource \fBhighlightColor\fP)
.br
\(en \fBHighlightForegroundColour\fP= selected text colour 
(corresponds to the xterm resource \fBhighlightTextColor\fP 
with \fBhighlightColorMode\fP); only effective if both are configured

.TP
\fBScrollback search colours\fP
The highlighting colours of search matches can be configured.
.br
\(en \fBSearchForegroundColour\fP=\fIblack\fP
.br
\(en \fBSearchBackgroundColour\fP=\fIlight yellow\fP
.br
\(en \fBSearchCurrentColour\fP=\fIbright yellow\fP

.TP
\fBBackground image or texture\fP (Background=)
With this option, an image can be chosen as background.
With an image file name, absolute (with an optional \fB~\fP prefix) 
or relative to the current terminal foreground process, 
the option either uses the image as a background picture, scaled to 
the terminal size (optional prefix \fB_\fP to the filename), 
or initially scaling the terminal to the aspect ratio of the image 
(prefix \fB%\fP to the filename), 
or as a tiled background texture (prefix \fB*\fP to the filename), 
or it uses the current desktop background, achieving a virtual 
floating window effect (\fB=\fP without filename, currently only applicable 
if desktop wallpaper is set as being "tiled" and unscaled).

The background can be changed with an OSC 11 escape sequence, 
instead of a colour using a background specification 
prefixed with either of \fB_\fP, \fB%\fP, \fB*\fP, \fB=\fP.

If the background filename is followed by a comma and a number between 1 and 254, 
the background image will be dimmed towards the background colour;
with a value of 255, the alpha transparency values of the image will be used.

.TP
\fBScrollback search bar\fP (SearchBar=)
This string option can customize the order of items in the search bar.
Use x (close button), </> (previous/next buttons), s (search string) to 
select the order of these fields in the search bar; missing fields will 
be appended in a default order.

.TP
\fBScrollback search context\fP (SearchContext=0)
This option will place the search result at the given distance from 
the terminal top/bottom border when scrolling to the result location.
If the value is negative, it will also keep the result at the (positive) 
distance if the result is already visible.

.TP
\fBWrite if exited\fP (ExitWrite=no)
Together with a hold option that keeps the terminal open after its child 
process terminated, this option always writes an exit indication to the 
screen. By default, only an error exit code is displayed.

.TP
\fBChange title if exited\fP (ExitTitle=)
Together with a hold option that keeps the terminal open after its child 
process terminated, this option prefixes the window title with its string, 
for example -o ExitTitle="TERMINATED: ".

.TP
\fBConfigure document opening by mouse click\fP (OpeningClicks=1)
Enabling opening files, directories or URLs with mouse clicking, 
in addition to the context menu. Values 1, 2, or 3 require Ctrl+mouse-click, 
double-click, or triple-click, respectively, to invoke the document opening.
Value 0 disables click-opening.

.TP
\fBControl key and shortcut Shift exchange\fP (CtrlExchangeShift=no)
Exchange the range of Control characters with the range of 
Ctrl+Shift shortcuts, so that for example Ctrl+V will paste and 
Ctrl+Shift+V will enter a Control+V character.

.TP
\fBMouse zooming\fP (ZoomMouse=yes)
Enabling font zooming with \fBCtrl+mouse-wheel/middle-mouse-click\fP.

.TP
\fBDisable Shift-coupled implicit font zooming\fP (ZoomFontWithWindow=yes)
If this option is set to false, implicit font zooming coupled with 
window zooming by the Shift key is disabled, except for the 
keyboard zoom functions Shift+Alt+Enter and the Shift+menu function.

.TP
\fBHandling of DPI changes\fP (HandleDPI=2)
When the window is moved to another monitor that has a different DPI 
value ("scaling factor") configured, newer Windows 10 versions support 
semi-automatic compensation by appropriate scaling.
This option can be set to support either DPI handling modes 1 or 2 
(if supported, respectively), or set to 0/false to suppress DPI adjustments.

.TP
\fBCheck availability of mintty version update\fP (CheckVersionUpdate=900)
If non-zero, mintty checks whether there is a version update available 
whenever the Options dialog is opened and this was not checked within 
the last given number of seconds.

.TP
\fBSixel image clipboard substitution\fP (SixelClipChars=\fIspace\fP)
Characters to copy to clipboard as a substitute for Sixel image graphics,
to indicate their positions. With an empty value, U+FFFC will be used.
Double-width characters should not be used here.

.TP
\fBDrag-and-drop application-targetted commands\fP (DropCommands=)
With this setting, a set of string patterns can be configured for 
paste insertion, in dependence of the program running in the terminal 
foreground. The value is a series of semicolon-separated, colon-combined 
pairs of program name and drop pattern; the pattern is pasted with the 
actual clipboard contents replaced for a "%s".
If a semicolon shall be embedded into any of the drop patterns, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it.
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

\fINote:\fP This is an experimental feature, with an experimental configuration format.

\fINote:\fP This feature potentially makes mintty vulnerable against command injection.
Be careful what commands you configure! For shell commands, it is 
advisable to embed the "%s" parameter placeholder in single quotation 
marks explicitly, both to avoid trouble with special characters, and 
to reduce the risk of injecting commands via tricky filenames.

Examples:
.br
\(en \fBDropCommands=bash:cd \(aq%s\(aq^M;mined:^[fo^M%s^M;vim:^[:e %s^M\fP
.br
\(en \fBDropCommands=^_bash:cd \(aq%s\(aq;echo $PWD^M^_vim:^[:e %s^M^_\fP

\fINote:\fP An "Enter" key has to be specified with the CR character code, 
control characters need to be embedded verbatim 
(indicated above as "^M" or "^["); there is no escape notation.

\fINote:\fP If different actions for directories/folders or even different 
command invocations depending on file name pattern are desired, this should 
be handled by a suitable cooperating shell function.

.TP
\fBUser commands\fP (UserCommands=) [DEPRECATED, see \fBCtxMenuFunctions\fP]
This setting lists user-defined commands for the extended context menu.
The value is a series of semicolon-separated, colon-combined 
pairs of menu item label and command pattern; the command is invoked and its 
standard output is pasted into the terminal, applying bracketed-paste mode 
if enabled.
If a semicolon shall be embedded into any of the command patterns, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it.
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

Mintty provides useful information in environment variables:
.br
MINTTY_SELECT for the current selection
.br
MINTTY_BUFFER for the complete terminal contents including scrollback buffer
.br
MINTTY_SCREEN for the current screen; if scrolled back, starting at the current scroll position
.br
MINTTY_OUTPUT for the output of the previous command, if prompt lines are marked
.br
MINTTY_TITLE for the window title text
.br
MINTTY_PID for the program ID of the terminal foreground process
.br
MINTTY_PROG for the program name of the terminal foreground process
.br
MINTTY_CWD for the current working directory of the foreground process

\fINote:\fP Menu item labels are subject to localization if they are 
added to the localization file of the selected UI localization language 
(in subdirectory \fIlang\fP of a mintty resource directory).

\fINote:\fP Menu item labels can contain a \fB&\fP sign to indicate a 
key shortcut for menu item selection.

\fINote:\fP The previous command can be detected if prompt lines are marked 
with the escape sequence ^[[?7711h.
See the Control Sequences wiki page \fIhttps://github.com/mintty/mintty/wiki/CtrlSeqs#scroll-markers\fP.

\fINote:\fP The PATH environment for the external command can be set up 
with option \fBUserCommandsPath\fP.

\fINote:\fP This is an experimental feature, with an experimental configuration format.

\fINote:\fP Normal terminal interaction continues after the invoked commands 
have terminated. Be careful not to configure commands that can stall or block!

\fINote:\fP This feature potentially makes mintty vulnerable against command injection.
Be careful what commands you configure! Especially do not embed 
environment variable parameters unquoted (like \fBecho $MINTTY_SELECT\fP), 
in order to avoid the risk of injecting commands via tricky selected text.

Examples:
.br
\(en \fBUserCommands=Paste capital:echo -n "$MINTTY_SELECT" | tr \(aqa-z\(aq \(aqA-Z\(aq;Paste small:echo -n "$MINTTY_SELECT" | tr \(aqA-Z\(aq \(aqa-z\(aq\fP
.br
\(en \fBUserCommands=google:cygstart https://www.google.de/search?q="$MINTTY_SELECT"\fP

\fINote:\fP Control characters need to be embedded verbatim; there is no escape notation.

.TP
\fBUser commands PATH expansion\fP (UserCommandsPath=/bin:%s)
This setting defines the PATH environment for user-defined external commands,
applicable to extended context menu commands (UserCommands=...:...)
and key-attached external commands (KeyFunctions=...:\`...\`).
If the value contains a single \fB%s\fP placeholder, the current 
environment PATH is substituted for it.

.TP
\fBSystem menu user commands\fP (CtxMenuFunctions=)
This setting lists user-defined functions or commands for the context menus 
(right mouse click in text area).
If it is configured, it is by default included in the extended context menu 
(Control+right-click) but can be configured for other context menu 
invocations as well (see configuration of \fIMenu contents\fP with options 
\fBMenu*\fP), along with the deprecated configured user commands (\fBUserCommands\fP).

The value is a series of semicolon-separated, colon-combined 
pairs of key and action descriptors
(if a semicolon shall be embedded into any of the action descriptors, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it).
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

The configuration is similar to the \fBUserCommands\fP setting with respect 
to menu labels, and to \fBKeyFunctions\fP setting with respect to function 
designations; respective notes and warnings apply.

.TP
\fBSystem menu user commands\fP (SysMenuFunctions=)
This setting lists user-defined functions or commands for the system menu 
(right mouse click on title bar or left click on title bar icon).
If it is configured, the middle items of the menu (including Options... 
and New) are replaced by the configured functions.

The value is a series of semicolon-separated, colon-combined 
pairs of key and action descriptors
(if a semicolon shall be embedded into any of the action descriptors, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it).
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

The configuration is similar to the \fBUserCommands\fP setting with respect 
to menu labels, and to \fBKeyFunctions\fP setting with respect to function 
designations; respective notes and warnings apply.
\fINote:\fP To include default items and keep their language localization 
enabled, their label strings need to be reproduced exactly as registered 
in the localization pattern file \fBmessages.pot\fP, including the position 
of a \fB&\fP marker which indicates a key shortcut for menu item selection.

Examples:
.br
\(en \fBSysMenuFunctions=&Lock Title:lock-title;Copy &Title:copy-title;&Options...:options;Ne&w:new-window\fP

.TP
\fBSession launcher commands\fP (SessionCommands=)
This setting lists mintty invocation parameters for the session launcher.
The value is a series of semicolon-separated, colon-combined 
pairs of session launch names (used as menu item labels) and 
invocation parameter lists; when selecting one of the launch names, 
mintty is invoked with the respective parameters.
(If a semicolon shall be embedded into any of the command patterns, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it.)
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

\fINote:\fP Session launch names are subject to localization if they are 
added to the localization file of the selected UI localization language 
(in subdirectory \fIlang\fP of a mintty resource directory).

\fINote:\fP This is an experimental feature, with an experimental configuration format.

Examples:
.br
\(en \fBSessionCommands=big:-w max;Ubuntu:--WSL=Ubuntu;mybox:ssh mybox\fP
.br
\(en \fBSessionCommands=mycolours:-C ~/.minttyrc.mycolours\fP

\fINote:\fP Control characters need to be embedded verbatim; there is no escape notation.

.TP
\fBTaskbar commands\fP (TaskCommands=)
This setting lists mintty invocation parameters for the "Tasks" list in the 
taskbar icon, also known as "jump list".
The value is a series of semicolon-separated, colon-combined 
pairs of task names and invocation parameter lists; 
when selecting one of the tasks from the taskbar icon, 
mintty is invoked with the respective parameters.
(If a semicolon shall be embedded into any of the command patterns, 
a non-whitespace control character (i.e. none of \fB^I^J^K^L^M\fP) can be 
specified as an alternative separator by starting the whole setting with it.)
The definition list can be split over multiple lines if a separator is 
followed by a backslash, newline, and optional whitespace indentation.

\fINote:\fP This feature only works in combination with a parameter 
\fB-o AppID=...\fP. If the taskbar icon is "pinned" to the taskbar, 
the task list is retained with it, initially...

\fINote:\fP To make the jump list persistent, it is necessary to carefully 
apply additional tricks to satisfy the insane taskbar configuration paradigm of Windows.
First, also configure a default taskbar icon command using options 
AppName and AppLaunchCmd.
Second, choose a unique value for AppID and also add it to 
the (default) launch command and all (jumplist) task commands.
Third, invoke mintty with the chosen AppID and option --store-taskbar-properties.

\fINote:\fP Task names are subject to localization if they are 
added to the localization file of the selected UI localization language 
(in subdirectory \fIlang\fP of a mintty resource directory).

\fINote:\fP If the parameter list contains "--WSL", mintty will try to 
determine a suitable WSL distribution icon for the jump list, or use the 
WSLtty default icon from the mintty resource subdirectory \fIicon\fP, 
or from the WSLtty package if installed.

\fINote:\fP This is an experimental feature, with an experimental configuration format.

Examples:
.br
\(en \fBTaskCommands=big:-w max;Ubuntu:--WSL=Ubuntu;mybox:ssh mybox\fP
.br
\(en \fBTaskCommands=mycolours:-C ~/.minttyrc.mycolours\fP

\fINote:\fP Control characters need to be embedded verbatim; there is no escape notation.

.TP
\fBMenu contents\fP
These settings allow to customize the context menu as opened in various ways.
.br
\(en \fBMouse\fP (MenuMouse=b); the normal mouse-right-click context menu
.br
\(en \fBCtrl+Mouse\fP (MenuCtrlMouse=e|ls); the Ctrl+right-click menu
.br
\(en \fBMouse button 5\fP (MenuMouse5=ls); the mouse button 5 menu
.br
\(en \fBMenu key\fP (MenuMenu=bs); the Menu key (unless redefined)
.br
\(en \fBCtrl+Menu key\fP (MenuCtrlMenu=e|ls); the Ctrl+Menu-key

Menu contents can be configured by a sequence of characters with the following meaning:
.br
\(en \fBb\fP: basic context menu
.br
\(en \fBx\fP: extended context menu without user commands
.br
\(en \fBe\fP: extended context menu with user commands (if configured)
.br
\(en \fBu\fP: user commands (\fBCtxMenuFunctions\fP, \fBUserCommands\fP)
.br
\(en \fBl\fP: session launcher
.br
\(en \fBs\fP: session switcher (Virtual Tabs)
.br
\(en \fB|\fP: vertical separator, adding a new column
.br
\(en \fBT\fP: the menu is opened at the text cursor position
.br
\(en \fBP\fP: the menu is opened at the mouse pointer position
.br
\(en \fBW\fP: show window icon for uniconized windows in session switcher

.TP
\fBSession geometry synchronization / Virtual tabs\fP (SessionGeomSync=0)
This setting defines the level of approximation of "tabbed" window 
operation within the Virtual Tabs feature:
.br
\(en \fB0\fP: no geometry handling; terminal session windows are separate
.br
\(en \fB1\fP: sync. position/size when switching/launching a session
.br
\(en \fB2\fP: sync. also when window is moved or resized
.br
\(en \fB3\fP: sync. also when window is minimized
.br
\(en \fB4\fP: sync. also when window is started separately

.SH LIMITATIONS

.SS Console issue

Mintty is not a full replacement for Cygwin Console (i.e. cygwin running 
in a Windows console window).
Like xterm and rxvt, mintty communicates with the child process through a
pseudo terminal device, which Cygwin emulates using Windows pipes.
This means that native Windows command line programs started in mintty see
a pipe rather than a console device.
As a consequence, such programs often disable interactive input. Also,
direct calls to low-level Win32 console functions will fail.
Programs that access the console as a file should be fine though.

See \fIhttps://github.com/mintty/mintty/wiki/Tips#inputoutput-interaction-with-alien-programs\fP 
for further hints, especially on the \fIwinpty\fP wrapper.

.SS Termcap/terminfo

Mintty does not have its own \fItermcap\fP or \fIterminfo\fP entries;
like a number of other terminal emulators, it reuses the xterm entry.

.SS Screen control features, DEC and xterm compatibility

Mintty is compatible with xterm screen control.
It supports DEC terminal screen features up to the VT500 series 
except DECRLM (right-to-left cursor motion), 
also supporting VT52 mode, thus being fully VT100-compatible.
It also includes most other xterm-specific control sequences and modes.

In addition, mintty supports a maximum of ANSI and ECMA-48 character attribute controls 
(including RGB and CMYK true-colour support, italic, overline, 
strikeout, rapid blinking, alternative fonts) and additional 
rendering attributes (underline styles and colours, superscript and subscript, 
shadowed and overstrike).
Mintty provides Sixel graphics and other image support, Emoji support, and 
Bidi reordering according to the Unicode Bidi Algorithm UBA, amended 
with flexible bidi controls according to the draft bidi mode model of 
the \fBBiDi in Terminal Emulators\fP recommendation 
(\fIhttps://terminal-wg.pages.freedesktop.org/bidi/\fP).

Mintty is not as configurable as xterm; it offers essential configuration 
features, many of which are "hidden settings", i.e. they do not appear in 
the interactive "Options" configuration dialog.
Of xterm's keyboard modes, only the default PC-style and VT220-style are available.
8-bit control characters are not supported.
There is no Tektronix 4014 emulation.
Mouse highlighting mode is not implemented.

.SH SEE ALSO

Additional information can be found on the wiki on the mintty project page 
\fIhttps://github.com/mintty/mintty/wiki\fP.

.SH LICENSE

Copyright (C) 2013 Andy Koppe (C) 2019 Thomas Wolff

Mintty is released under the terms of the the \fIGNU General Public License\fP
version 3.
See \fIhttp://gnu.org/licenses/gpl\fP for the license text.

There is NO WARRANTY, to the extent permitted by law.

.SH CONTACT

Please report bugs or suggest enhancements via the issue tracker at
\fIhttps://github.com/mintty/mintty/issues\fP.
Questions can be sent to the Cygwin mailing list at \fIcygwin@cygwin.com\fP, 
to the Mintty discussion issue \fIhttps://github.com/mintty/mintty/issues/500\fP, 
or to the Gitter chat (experimental) \fIhttps://gitter.im/mintty/mintty\fP.
