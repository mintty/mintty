#include "std.h"
#include "minibidi.h"
#include <stdio.h>

#define LTR 0
#define RTL 1
#define autoLTR 2

#define L	'A'
#define LRE	0x202A
#define LRO	0x202D
#define R	0x05D0
#define AL	0x0627
#define RLE	0x202B
#define RLO	0x202E
#define PDF	0x202C
#define EN	'0'
#define ES	'+'
#define ET	'#'
#define AN	0x0660
#define CS	'/'
#define NSM	0x0300
#define BN	0xAD
#define B	'\n'
#define S	'\t'
#define WS	' '
#define ON	'!'
#define LRI	0x2066
#define RLI	0x2067
#define FSI	0x2068
#define PDI	0x2069

struct {
	char * name;
	int u;
} names[] = {
	{"AL",	0x0627},
	{"AN",	0x0660},
	{"B",	'\n'},
	{"BN",	0xAD},
	{"CS",	'/'},
	{"EN",	'0'},
	{"ES",	'+'},
	{"ET",	'#'},
	{"FSI",	0x2068},
	{"L",	'A'},
	{"LRE",	0x202A},
	{"LRI",	0x2066},
	{"LRO",	0x202D},
	{"NSM",	0x0300},
	{"ON",	'!'},
	{"PDF",	0x202C},
	{"PDI",	0x2069},
	{"R",	0x05D0},
	{"RLE",	0x202B},
	{"RLI",	0x2067},
	{"RLO",	0x202E},
	{"S",	'\t'},
	{"WS",	' '},
};

int sample (char * name)
{
	int i = -1;
	int j = sizeof(names) / sizeof(*names);
	while (j - i > 1) {
		int k = (i + j) / 2;
		int cmp = strcmp (name, names[k].name);
		if (cmp == 0)
			return names[k].u;
		if (cmp < 0)
			j = k;
		else
			i = k;
	}
	return 0;
}

extern uchar bidi_levels[];

int total = 0;
int passed = 0;
int failedoddisolate = 0;
int failedoddmarkers = 0;
int failedisolate = 0;
int failedmarkers = 0;
int failednonspac = 0;
int failedneutral = 0;
int skipmarkers = 0;
int skipoddmarkers = 0;
int verbose = 0;

static void tc (char * s, int seq[], int dir, int plevel, int reslevels[], int order[])
{
	int len = 0;
	while (seq[len] >= 0)
		len ++;
	bidi_char bc[len];
	int hasisolate = 0;
	int hasmarkers = 0;
	int hasnonspac = 0;
	int hasneutral = 0;
	int oddisolate = 0;
	int oddmarkers = 0;
	for (int i = 0; i < len; i++) {
		bc[i].origwc = bc[i].wc = seq[i];
		bc[i].index = i;
		bc[i].wide = 0;
		if (seq[i] >= LRI && seq[i] <= PDI)
			hasisolate = 1;
		else if (seq[i] >= LRE && seq[i] <= RLO)
			hasmarkers = 1;
		else if (seq[i] == NSM)  // only for pass 2
			hasnonspac = 1;
		else if (seq[i] == BN)  // only for pass 2
			hasneutral = 1;
		if (seq[i] == PDI)
			oddisolate--;
		else if (seq[i] >= LRI && seq[i] <= PDI)
			oddisolate++;
		if (seq[i] == PDF)
			oddmarkers--;
		else if (seq[i] >= LRE && seq[i] <= RLO)
			oddmarkers++;
	}
	int lvl = do_bidi(dir == autoLTR, dir == RTL ? RTL : LTR, 0, 0, bc, len);

	total++;
	// check order
	int oi = 0;
	int err = 0;
	for (int i = 0; i < len; i++) {
///printf("resl %d: %d order %d: %d bc %d: %d\n", i, reslevels[i], oi, order[oi], i, bc[i].index);
		if (reslevels[bc[i].index] >= 0) {
			if (bc[i].index != order[oi++]) {
				err = 1;
				break;
			}
		}
	}
	if (!err)
		passed++;
	else {
	    if (hasisolate)
		failedisolate++;
	    else if (hasmarkers)
		failedmarkers++;
	    else if (hasnonspac)
		failednonspac++;
	    else if (hasneutral)
		failedneutral++;
	    if (skipmarkers)
		if (hasisolate || hasmarkers || hasnonspac || hasneutral)
			return;
	    if (oddisolate)
		failedoddisolate++;
	    if (oddmarkers)
		failedoddmarkers++;
	    if (skipoddmarkers)
		if (oddisolate || oddmarkers)
			return;

	    // trace failed cases
	    if (verbose) {
		printf("[41mFAILED[m %d\n", total);
	    }
	    if (verbose > 1) {
		printf("%s", s);
		// mark line direction
		printf("[%s] !%d -> ?%d\n", (char*[]){"LTR", "RTL", "autoLTR"}[dir], plevel, lvl);
	    }
	    if (verbose > 2) {
		// quote line, expected and resolved paragraph level
		for (int i = 0; i < len; i++)
			printf("%04X ", seq[i]);
		printf("!%d -> ?%d\n", plevel, lvl);

		// refer embedding levels
		int olen = 0;
		for (int i = 0; i < len; i++) {
			printf("%4d ", reslevels[i]);
			if (reslevels[i] >= 0)
				olen ++;
		}
		printf("!levels\n");

		// quote resolved levels
		for (int i = 0; i < len; i++)
			printf("%4d ", bidi_levels[i]);
		printf("-> ?levels\n");

		// refer order
		for (int i = 0; i < olen; i++)
			printf("%4d ", order[i]);
		printf("!order\n");

		// quote order
		for (int i = 0; i < len; i++)
			printf("%4d ", bc[i].index);
		printf("-> ?order\n");
	    }
	}
}

static void tcs (char * s, int seq[], int dirmask, int reslevels[], int order[])
{
	if (dirmask & 1)
		tc (s, seq, autoLTR, -1, reslevels, order);
	if (dirmask & 2)
		tc (s, seq, LTR, -1, reslevels, order);
	if (dirmask & 4)
		tc (s, seq, RTL, -1, reslevels, order);
}

int main (int argc, char *argv[])
{
	char * par = (argc > 1) ? argv[1] : "";
	FILE * devnull = fopen ("/dev/null", "r");
	FILE * bct = fopen ("BidiCharacterTest.txt", "r");
	FILE * bt = fopen ("BidiTest.txt", "r");
	if (strchr (par, '-')) {
		bct = stdin;
		bt = stdin;
extern int do_trace_bidi;
		do_trace_bidi = 2;
	}
	if (strchr (par, 'v')) {
		verbose = 1;
		if (strchr (strchr (par, 'v') + 1, 'v')) {
			verbose++;
		}
	}
	if (strchr (par, 'm'))
		skipmarkers = 1;
	if (strchr (par, 'o'))
		skipoddmarkers = 1;
	if (strchr (par, '2'))
		bct = devnull;
	if (strchr (par, '1'))
		bt = devnull;
	if (!bct || !bt) {
		fprintf (stderr, "Unicode file(s) not available");
		exit (9);
	}

	char s [2222];

	//0661 0028 05D0 202C 0029;0;0;2 1 1 x 1;4 2 1 0
	while (fgets (s, sizeof s, bct))
	    if (*s > '#') {
		int seq[555];
		int i = 0;
		char * sp = s;
		int u;
		int n;
		while (sscanf (sp, "%x%n", &u, &n) > 0) {
			seq[i++] = u;
			sp += n;
		}
		seq[i] = -1;

		int dir;
		int plevel;
		if (sscanf (sp, ";%d;%d;%n", &dir, &plevel, &n) < 2) {
			fprintf (stderr, "Failed to parse <%s>\n", s);
			exit (9);
		}
		sp += n;

		int reslevels[555];
		i = 0;
		do {
			while (*sp == ' ')
				sp++;
			if (*sp == 'x') {
				reslevels[i++] = -1;
				sp++;
			}
			else if (sscanf (sp, "%d%n", &u, &n) > 0) {
				reslevels[i++] = u;
				sp += n;
			}
			else if (*sp == ';') {
				sp++;
				break;
			}
			else {
				fprintf (stderr, "Failed to parse <%s>\n", s);
				exit (9);
			}
		} while (1);

		int order[555];
		i = 0;
		do {
			while (*sp == ' ')
				sp++;
			if (sscanf (sp, "%d%n", &u, &n) > 0) {
				order[i++] = u;
				sp += n;
			}
			else if (*sp < ' ')
				break;
			else {
				fprintf (stderr, "Failed to parse <%s>\n", s);
				exit (9);
			}
		} while (1);

		tc (s, seq, dir, plevel, reslevels, order);
	    }
	if (bct != devnull && total) {
		printf ("total %d / passed %d / failed %d (%d%%)\n",
		total, passed, total - passed, (total - passed) * 100 / total);
		printf ("failed isolate %d / markers %d / others %d\n",
		failedisolate, failedmarkers, total - passed - failedisolate - failedmarkers);
		printf ("failed odd isolate %d / odd markers %d\n", failedoddisolate, failedoddmarkers);
	}

	int levels[555];
	int reorder[555];
	//@Levels:	0 x x
	//@Reorder:	0
	//L BN PDF; 3
	while (fgets (s, sizeof s, bt))
	    if (*s > '#') {
		char * sp = s;
		int * lp = 0;
		if (!strncmp (s, "@Levels:", 8))
			lp = levels;
		else if (!strncmp (s, "@Reorder:", 9))
			lp = reorder;
		if (lp) {
		    while (*sp > ' ')
			sp++;
		    int i = 0;
		    do {
			int u;
			int n;
			while (*sp == ' ' || *sp == '\t')
				sp++;
			if (*sp == 'x') {
				lp[i++] = -1;
				sp++;
			}
			else if (sscanf (sp, "%d%n", &u, &n) > 0) {
				lp[i++] = u;
				sp += n;
			}
			else if (*sp < ' ') {
				break;
			}
			else {
				fprintf (stderr, "Failed to parse <%s>\n", s);
				exit (9);
			}
		    } while (1);
		}
		else {
			int seq[555];
			int i = 0;
			char * sp = s;
			char name[9];
			char dum[9];
			int n;
			while (sscanf (sp, "%[^ ;]%n", &name, &n) > 0) {
				seq[i++] = sample (name);
				sp += n;
				while (*sp == ' ')
					sp++;
			}
			seq[i] = -1;

			int dirmask;
			if (sscanf (sp, ";%d", &dirmask) < 1) {
				fprintf (stderr, "Failed to parse <%s>\n", s);
				exit (9);
			}

			tcs (s, seq, dirmask, levels, reorder);
		}
	    }
	if (bt != devnull && total) {
		printf ("total %d / passed %d / failed %d (%d%%)\n",
		total, passed, total - passed, (total - passed) * 100 / total);
		printf ("failed isolate %d / markers %d / nonspac %d / neutral %d / others %d\n",
		failedisolate, failedmarkers, failednonspac, failedneutral, total - passed - failedisolate - failedmarkers - failednonspac - failedneutral);
		printf ("failed odd isolate %d / odd markers %d\n", failedoddisolate, failedoddmarkers);
	}

	exit (passed != total);
}
